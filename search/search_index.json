{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Certifikit \u00b6 Kotlin Certificate processing library. Get Certifikit \u00b6 With Gradle: implementation \"app.cash.certifikit:certifikit:0.2.0\" License \u00b6 Copyright 2020 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#certifikit","text":"Kotlin Certificate processing library.","title":"Certifikit"},{"location":"#get-certifikit","text":"With Gradle: implementation \"app.cash.certifikit:certifikit:0.2.0\"","title":"Get Certifikit"},{"location":"#license","text":"Copyright 2020 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log \u00b6 Version 0.2.0 \u00b6 2020-07-19 Initial published release. Version 0.1.0 \u00b6 2020-07-11 Forked from OkHttp\u2019s internal implementation.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-020","text":"2020-07-19 Initial published release.","title":"Version 0.2.0"},{"location":"changelog/#version-010","text":"2020-07-11 Forked from OkHttp\u2019s internal implementation.","title":"Version 0.1.0"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct \u00b6 At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement \u00b6 We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks \u00b6 Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"contributing/","text":"Contributing \u00b6 Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome. If you\u2019ve found a security problem, please follow our bug bounty program. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA) . Code Contributions \u00b6 Get working code on a personal branch with tests passing before you submit a PR: ./gradlew clean check Please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge. Committer\u2019s Guides \u00b6 Releasing","title":"Contributing"},{"location":"contributing/#contributing","text":"Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome. If you\u2019ve found a security problem, please follow our bug bounty program. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#code-contributions","text":"Get working code on a personal branch with tests passing before you submit a PR: ./gradlew clean check Please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge.","title":"Code Contributions"},{"location":"contributing/#committers-guides","text":"Releasing","title":"Committer's Guides"},{"location":"releasing/","text":"Releasing \u00b6 Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Update the build and docs: sed -i \"\" \\ \"s/version = '.*'/version = '$RELEASE_VERSION'/g\" \\ build.gradle Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a certifikit-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/version = '.*'/version = '$NEXT_VERSION'/g\" \\ build.gradle git commit -am \"Prepare next development version.\" git push && git push --tags Wait until the \u201cPublish a release\u201d action completes. If the github action fails, drop the artifacts from Sonatype Nexus and re run the job. Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem!","title":"Releasing"},{"location":"releasing/#releasing","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Update the build and docs: sed -i \"\" \\ \"s/version = '.*'/version = '$RELEASE_VERSION'/g\" \\ build.gradle Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a certifikit-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/version = '.*'/version = '$NEXT_VERSION'/g\" \\ build.gradle git commit -am \"Prepare next development version.\" git push && git push --tags Wait until the \u201cPublish a release\u201d action completes. If the github action fails, drop the artifacts from Sonatype Nexus and re run the job. Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem!","title":"Releasing"},{"location":"security/","text":"Security \u00b6 Reporting a Vulnerability \u00b6 Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource","title":"Security"},{"location":"security/#security","text":"","title":"Security"},{"location":"security/#reporting-a-vulnerability","text":"Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource","title":"Reporting a Vulnerability"},{"location":"0.x/certifikit/","text":"certifikit Packages \u00b6 Name Summary app.cash.certifikit app.cash.certifikit.attestation app.cash.certifikit.text Index \u00b6 All Types","title":"Packages - Certifikit"},{"location":"0.x/certifikit/#packages","text":"Name Summary app.cash.certifikit app.cash.certifikit.attestation app.cash.certifikit.text","title":"Packages"},{"location":"0.x/certifikit/#index","text":"All Types","title":"Index"},{"location":"0.x/certifikit/alltypes/","text":"All Types \u00b6 Name Summary app.cash.certifikit.AccessDescription \u00b6 | app.cash.certifikit.AlgorithmIdentifier \u00b6 | app.cash.certifikit.AnyValue \u00b6 A value whose type is not specified statically. Use this with Adapters.any which will attempt to resolve a concrete type. | app.cash.certifikit.attestation.AttestationAdapters \u00b6 | app.cash.certifikit.AttributeTypeAndValue \u00b6 | app.cash.certifikit.attestation.AuthorizationList \u00b6 AuthorizationList ::= SEQUENCE { purpose [1] EXPLICIT SET OF INTEGER OPTIONAL, algorithm [2] EXPLICIT INTEGER OPTIONAL, keySize [3] EXPLICIT INTEGER OPTIONAL. digest [5] EXPLICIT SET OF INTEGER OPTIONAL, padding [6] EXPLICIT SET OF INTEGER OPTIONAL, ecCurve [10] EXPLICIT INTEGER OPTIONAL, rsaPublicExponent [200] EXPLICIT INTEGER OPTIONAL, rollbackResistance [303] EXPLICIT NULL OPTIONAL, activeDateTime [400] EXPLICIT INTEGER OPTIONAL originationExpireDateTime [401] EXPLICIT INTEGER OPTIONAL usageExpireDateTime [402] EXPLICIT INTEGER OPTIONAL noAuthRequired [503] EXPLICIT NULL OPTIONAL, userAuthType [504] EXPLICIT INTEGER OPTIONAL, authTimeout [505] EXPLICIT INTEGER OPTIONAL, allowWhileOnBody [506] EXPLICIT NULL OPTIONAL, trustedUserPresenceRequired [507] EXPLICIT NULL OPTIONAL, trustedConfirmationRequired [508] EXPLICIT NULL OPTIONAL, unlockedDeviceRequired [509] EXPLICIT NULL OPTIONAL, allApplications [600] EXPLICIT NULL OPTIONAL, applicationId [601] EXPLICIT OCTET_STRING OPTIONAL, creationDateTime [701] EXPLICIT INTEGER OPTIONAL, origin [702] EXPLICIT INTEGER OPTIONAL, rollbackResistant [703] EXPLICIT NULL OPTIONAL, rootOfTrust [704] EXPLICIT RootOfTrust OPTIONAL, osVersion [705] EXPLICIT INTEGER OPTIONAL, osPatchLevel [706] EXPLICIT INTEGER OPTIONAL, attestationApplicationId [709] EXPLICIT OCTET_STRING OPTIONAL, attestationIdBrand [710] EXPLICIT OCTET_STRING OPTIONAL, attestationIdDevice [711] EXPLICIT OCTET_STRING OPTIONAL, attestationIdProduct [712] EXPLICIT OCTET_STRING OPTIONAL, attestationIdSerial [713] EXPLICIT OCTET_STRING OPTIONAL, attestationIdImei [714] EXPLICIT OCTET_STRING OPTIONAL, attestationIdMeid [715] EXPLICIT OCTET_STRING OPTIONAL, attestationIdManufacturer [716] EXPLICIT OCTET_STRING OPTIONAL, attestationIdModel [717] EXPLICIT OCTET_STRING OPTIONAL, vendorPatchLevel [718] EXPLICIT INTEGER OPTIONAL, bootPatchLevel [719] EXPLICIT INTEGER OPTIONAL, } | app.cash.certifikit.BasicConstraints \u00b6 | app.cash.certifikit.BasicDerAdapter \u00b6 Handles basic types that always use the same tag. This supports optional types and may set a type hint for further adapters to process. | app.cash.certifikit.BitString \u00b6 Like a ByteString , but whose bits are not necessarily a strict multiple of 8. | app.cash.certifikit.Certificate \u00b6 | app.cash.certifikit.CertificateAdapters \u00b6 ASN.1 adapters adapted from the specifications in RFC 5280 . | app.cash.certifikit.Certifikit \u00b6 | app.cash.certifikit.DerHeader \u00b6 The first two bytes of each value is a header that includes its tag (field ID) and length. | app.cash.certifikit.DerReader \u00b6 Streaming decoder of data encoded following Abstract Syntax Notation One (ASN.1). There are multiple variants of ASN.1, including: | app.cash.certifikit.DerWriter \u00b6 | app.cash.certifikit.Extension \u00b6 | app.cash.certifikit.ExtKeyUsage \u00b6 | app.cash.certifikit.attestation.KeyDescription \u00b6 KeyDescription ::= SEQUENCE { attestationVersion INTEGER, attestationSecurityLevel SecurityLevel, keymasterVersion INTEGER, keymasterSecurityLevel SecurityLevel, attestationChallenge OCTET_STRING, uniqueId OCTET_STRING, softwareEnforced AuthorizationList, teeEnforced AuthorizationList, } SecurityLevel ::= ENUMERATED { Software (0), TrustedEnvironment (1), StrongBox (2), } | app.cash.certifikit.KeyUsage \u00b6 | app.cash.certifikit.ObjectIdentifiers \u00b6 ASN.1 object identifiers used internally by this implementation. | (extensions in package app.cash.certifikit.text) java.security.PrivateKey \u00b6 | app.cash.certifikit.PrivateKeyInfo \u00b6 A private key. Note that this class doesn\u2019t support attributes or an embedded public key. | app.cash.certifikit.attestation.RootOfTrust \u00b6 VerifiedBootState ::= ENUMERATED { Verified (0), SelfSigned (1), Unverified (2), Failed (3), } RootOfTrust ::= SEQUENCE { verifiedBootKey OCTET_STRING, deviceLocked BOOLEAN, verifiedBootState VerifiedBootState, verifiedBootHash OCTET_STRING, } | (extensions in package app.cash.certifikit.text) kotlin.String \u00b6 | app.cash.certifikit.SubjectPublicKeyInfo \u00b6 | app.cash.certifikit.TbsCertificate \u00b6 | app.cash.certifikit.Validity \u00b6 | (extensions in package app.cash.certifikit.text) java.security.cert.X509Certificate \u00b6","title":"All Types - Certifikit"},{"location":"0.x/certifikit/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitaccessdescription","text":"|","title":"app.cash.certifikit.AccessDescription"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitalgorithmidentifier","text":"|","title":"app.cash.certifikit.AlgorithmIdentifier"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitanyvalue","text":"A value whose type is not specified statically. Use this with Adapters.any which will attempt to resolve a concrete type. |","title":"app.cash.certifikit.AnyValue"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitattestationattestationadapters","text":"|","title":"app.cash.certifikit.attestation.AttestationAdapters"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitattributetypeandvalue","text":"|","title":"app.cash.certifikit.AttributeTypeAndValue"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitattestationauthorizationlist","text":"AuthorizationList ::= SEQUENCE { purpose [1] EXPLICIT SET OF INTEGER OPTIONAL, algorithm [2] EXPLICIT INTEGER OPTIONAL, keySize [3] EXPLICIT INTEGER OPTIONAL. digest [5] EXPLICIT SET OF INTEGER OPTIONAL, padding [6] EXPLICIT SET OF INTEGER OPTIONAL, ecCurve [10] EXPLICIT INTEGER OPTIONAL, rsaPublicExponent [200] EXPLICIT INTEGER OPTIONAL, rollbackResistance [303] EXPLICIT NULL OPTIONAL, activeDateTime [400] EXPLICIT INTEGER OPTIONAL originationExpireDateTime [401] EXPLICIT INTEGER OPTIONAL usageExpireDateTime [402] EXPLICIT INTEGER OPTIONAL noAuthRequired [503] EXPLICIT NULL OPTIONAL, userAuthType [504] EXPLICIT INTEGER OPTIONAL, authTimeout [505] EXPLICIT INTEGER OPTIONAL, allowWhileOnBody [506] EXPLICIT NULL OPTIONAL, trustedUserPresenceRequired [507] EXPLICIT NULL OPTIONAL, trustedConfirmationRequired [508] EXPLICIT NULL OPTIONAL, unlockedDeviceRequired [509] EXPLICIT NULL OPTIONAL, allApplications [600] EXPLICIT NULL OPTIONAL, applicationId [601] EXPLICIT OCTET_STRING OPTIONAL, creationDateTime [701] EXPLICIT INTEGER OPTIONAL, origin [702] EXPLICIT INTEGER OPTIONAL, rollbackResistant [703] EXPLICIT NULL OPTIONAL, rootOfTrust [704] EXPLICIT RootOfTrust OPTIONAL, osVersion [705] EXPLICIT INTEGER OPTIONAL, osPatchLevel [706] EXPLICIT INTEGER OPTIONAL, attestationApplicationId [709] EXPLICIT OCTET_STRING OPTIONAL, attestationIdBrand [710] EXPLICIT OCTET_STRING OPTIONAL, attestationIdDevice [711] EXPLICIT OCTET_STRING OPTIONAL, attestationIdProduct [712] EXPLICIT OCTET_STRING OPTIONAL, attestationIdSerial [713] EXPLICIT OCTET_STRING OPTIONAL, attestationIdImei [714] EXPLICIT OCTET_STRING OPTIONAL, attestationIdMeid [715] EXPLICIT OCTET_STRING OPTIONAL, attestationIdManufacturer [716] EXPLICIT OCTET_STRING OPTIONAL, attestationIdModel [717] EXPLICIT OCTET_STRING OPTIONAL, vendorPatchLevel [718] EXPLICIT INTEGER OPTIONAL, bootPatchLevel [719] EXPLICIT INTEGER OPTIONAL, } |","title":"app.cash.certifikit.attestation.AuthorizationList"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitbasicconstraints","text":"|","title":"app.cash.certifikit.BasicConstraints"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitbasicderadapter","text":"Handles basic types that always use the same tag. This supports optional types and may set a type hint for further adapters to process. |","title":"app.cash.certifikit.BasicDerAdapter"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitbitstring","text":"Like a ByteString , but whose bits are not necessarily a strict multiple of 8. |","title":"app.cash.certifikit.BitString"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitcertificate","text":"|","title":"app.cash.certifikit.Certificate"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitcertificateadapters","text":"ASN.1 adapters adapted from the specifications in RFC 5280 . |","title":"app.cash.certifikit.CertificateAdapters"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitcertifikit","text":"|","title":"app.cash.certifikit.Certifikit"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitderheader","text":"The first two bytes of each value is a header that includes its tag (field ID) and length. |","title":"app.cash.certifikit.DerHeader"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitderreader","text":"Streaming decoder of data encoded following Abstract Syntax Notation One (ASN.1). There are multiple variants of ASN.1, including: |","title":"app.cash.certifikit.DerReader"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitderwriter","text":"|","title":"app.cash.certifikit.DerWriter"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitextension","text":"|","title":"app.cash.certifikit.Extension"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitextkeyusage","text":"|","title":"app.cash.certifikit.ExtKeyUsage"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitattestationkeydescription","text":"KeyDescription ::= SEQUENCE { attestationVersion INTEGER, attestationSecurityLevel SecurityLevel, keymasterVersion INTEGER, keymasterSecurityLevel SecurityLevel, attestationChallenge OCTET_STRING, uniqueId OCTET_STRING, softwareEnforced AuthorizationList, teeEnforced AuthorizationList, } SecurityLevel ::= ENUMERATED { Software (0), TrustedEnvironment (1), StrongBox (2), } |","title":"app.cash.certifikit.attestation.KeyDescription"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitkeyusage","text":"|","title":"app.cash.certifikit.KeyUsage"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitobjectidentifiers","text":"ASN.1 object identifiers used internally by this implementation. | (extensions in package app.cash.certifikit.text)","title":"app.cash.certifikit.ObjectIdentifiers"},{"location":"0.x/certifikit/alltypes/#javasecurityprivatekey","text":"|","title":"java.security.PrivateKey"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitprivatekeyinfo","text":"A private key. Note that this class doesn\u2019t support attributes or an embedded public key. |","title":"app.cash.certifikit.PrivateKeyInfo"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitattestationrootoftrust","text":"VerifiedBootState ::= ENUMERATED { Verified (0), SelfSigned (1), Unverified (2), Failed (3), } RootOfTrust ::= SEQUENCE { verifiedBootKey OCTET_STRING, deviceLocked BOOLEAN, verifiedBootState VerifiedBootState, verifiedBootHash OCTET_STRING, } | (extensions in package app.cash.certifikit.text)","title":"app.cash.certifikit.attestation.RootOfTrust"},{"location":"0.x/certifikit/alltypes/#kotlinstring","text":"|","title":"kotlin.String"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitsubjectpublickeyinfo","text":"|","title":"app.cash.certifikit.SubjectPublicKeyInfo"},{"location":"0.x/certifikit/alltypes/#appcashcertifikittbscertificate","text":"|","title":"app.cash.certifikit.TbsCertificate"},{"location":"0.x/certifikit/alltypes/#appcashcertifikitvalidity","text":"| (extensions in package app.cash.certifikit.text)","title":"app.cash.certifikit.Validity"},{"location":"0.x/certifikit/alltypes/#javasecuritycertx509certificate","text":"","title":"java.security.cert.X509Certificate"},{"location":"0.x/certifikit/app.cash.certifikit/","text":"certifikit / app.cash.certifikit Package app.cash.certifikit \u00b6 Types \u00b6 Name Summary AccessDescription data class AccessDescription AlgorithmIdentifier data class AlgorithmIdentifier AnyValue A value whose type is not specified statically. Use this with Adapters.any which will attempt to resolve a concrete type. data class AnyValue AttributeTypeAndValue data class AttributeTypeAndValue BasicConstraints data class BasicConstraints BasicDerAdapter Handles basic types that always use the same tag. This supports optional types and may set a type hint for further adapters to process. data class BasicDerAdapter<T> : DerAdapter<T> BitString Like a ByteString , but whose bits are not necessarily a strict multiple of 8. data class BitString Certificate data class Certificate CertificateAdapters ASN.1 adapters adapted from the specifications in RFC 5280 . object CertificateAdapters Certifikit object Certifikit DerHeader The first two bytes of each value is a header that includes its tag (field ID) and length. data class DerHeader DerReader Streaming decoder of data encoded following Abstract Syntax Notation One (ASN.1). There are multiple variants of ASN.1, including: class DerReader DerWriter class DerWriter Extension data class Extension ExtKeyUsage data class ExtKeyUsage KeyUsage enum class KeyUsage ObjectIdentifiers ASN.1 object identifiers used internally by this implementation. object ObjectIdentifiers PrivateKeyInfo A private key. Note that this class doesn\u2019t support attributes or an embedded public key. data class PrivateKeyInfo SubjectPublicKeyInfo data class SubjectPublicKeyInfo TbsCertificate data class TbsCertificate Validity data class Validity Functions \u00b6 Name Summary decodeKeyUsage fun BitString .decodeKeyUsage(): List < KeyUsage >","title":"0.x API"},{"location":"0.x/certifikit/app.cash.certifikit/#package-appcashcertifikit","text":"","title":"Package app.cash.certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/#types","text":"Name Summary AccessDescription data class AccessDescription AlgorithmIdentifier data class AlgorithmIdentifier AnyValue A value whose type is not specified statically. Use this with Adapters.any which will attempt to resolve a concrete type. data class AnyValue AttributeTypeAndValue data class AttributeTypeAndValue BasicConstraints data class BasicConstraints BasicDerAdapter Handles basic types that always use the same tag. This supports optional types and may set a type hint for further adapters to process. data class BasicDerAdapter<T> : DerAdapter<T> BitString Like a ByteString , but whose bits are not necessarily a strict multiple of 8. data class BitString Certificate data class Certificate CertificateAdapters ASN.1 adapters adapted from the specifications in RFC 5280 . object CertificateAdapters Certifikit object Certifikit DerHeader The first two bytes of each value is a header that includes its tag (field ID) and length. data class DerHeader DerReader Streaming decoder of data encoded following Abstract Syntax Notation One (ASN.1). There are multiple variants of ASN.1, including: class DerReader DerWriter class DerWriter Extension data class Extension ExtKeyUsage data class ExtKeyUsage KeyUsage enum class KeyUsage ObjectIdentifiers ASN.1 object identifiers used internally by this implementation. object ObjectIdentifiers PrivateKeyInfo A private key. Note that this class doesn\u2019t support attributes or an embedded public key. data class PrivateKeyInfo SubjectPublicKeyInfo data class SubjectPublicKeyInfo TbsCertificate data class TbsCertificate Validity data class Validity","title":"Types"},{"location":"0.x/certifikit/app.cash.certifikit/#functions","text":"Name Summary decodeKeyUsage fun BitString .decodeKeyUsage(): List < KeyUsage >","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/decode-key-usage/","text":"certifikit / app.cash.certifikit / decodeKeyUsage decodeKeyUsage \u00b6 fun BitString .decodeKeyUsage(): List < KeyUsage >","title":"decodeKeyUsage - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/decode-key-usage/#decodekeyusage","text":"fun BitString .decodeKeyUsage(): List < KeyUsage >","title":"decodeKeyUsage"},{"location":"0.x/certifikit/app.cash.certifikit/-access-description/","text":"certifikit / app.cash.certifikit / AccessDescription AccessDescription \u00b6 data class AccessDescription Constructors \u00b6 Name Summary <init> AccessDescription(accessMethod: String , accessLocation: Pair < Any , Any >) Properties \u00b6 Name Summary accessLocation val accessLocation: Pair < Any , Any > accessMethod val accessMethod: String name val name: String","title":"AccessDescription - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-access-description/#accessdescription","text":"data class AccessDescription","title":"AccessDescription"},{"location":"0.x/certifikit/app.cash.certifikit/-access-description/#constructors","text":"Name Summary <init> AccessDescription(accessMethod: String , accessLocation: Pair < Any , Any >)","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-access-description/#properties","text":"Name Summary accessLocation val accessLocation: Pair < Any , Any > accessMethod val accessMethod: String name val name: String","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-access-description/-init-/","text":"certifikit / app.cash.certifikit / AccessDescription / <init> <init> \u00b6 AccessDescription(accessMethod: String , accessLocation: Pair < Any , Any >)","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-access-description/-init-/#init","text":"AccessDescription(accessMethod: String , accessLocation: Pair < Any , Any >)","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-access-description/access-location/","text":"certifikit / app.cash.certifikit / AccessDescription / accessLocation accessLocation \u00b6 val accessLocation: Pair < Any , Any >","title":"accessLocation - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-access-description/access-location/#accesslocation","text":"val accessLocation: Pair < Any , Any >","title":"accessLocation"},{"location":"0.x/certifikit/app.cash.certifikit/-access-description/access-method/","text":"certifikit / app.cash.certifikit / AccessDescription / accessMethod accessMethod \u00b6 val accessMethod: String","title":"accessMethod - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-access-description/access-method/#accessmethod","text":"val accessMethod: String","title":"accessMethod"},{"location":"0.x/certifikit/app.cash.certifikit/-access-description/name/","text":"certifikit / app.cash.certifikit / AccessDescription / name name \u00b6 val name: String","title":"name - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-access-description/name/#name","text":"val name: String","title":"name"},{"location":"0.x/certifikit/app.cash.certifikit/-algorithm-identifier/","text":"certifikit / app.cash.certifikit / AlgorithmIdentifier AlgorithmIdentifier \u00b6 data class AlgorithmIdentifier Constructors \u00b6 Name Summary <init> AlgorithmIdentifier(algorithm: String , parameters: Any ?) Properties \u00b6 Name Summary algorithm An OID string like \u201c1.2.840.113549.1.1.11\u201d for sha256WithRSAEncryption. val algorithm: String parameters Parameters of a type implied by algorithm . val parameters: Any ?","title":"AlgorithmIdentifier - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-algorithm-identifier/#algorithmidentifier","text":"data class AlgorithmIdentifier","title":"AlgorithmIdentifier"},{"location":"0.x/certifikit/app.cash.certifikit/-algorithm-identifier/#constructors","text":"Name Summary <init> AlgorithmIdentifier(algorithm: String , parameters: Any ?)","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-algorithm-identifier/#properties","text":"Name Summary algorithm An OID string like \u201c1.2.840.113549.1.1.11\u201d for sha256WithRSAEncryption. val algorithm: String parameters Parameters of a type implied by algorithm . val parameters: Any ?","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-algorithm-identifier/-init-/","text":"certifikit / app.cash.certifikit / AlgorithmIdentifier / <init> <init> \u00b6 AlgorithmIdentifier(algorithm: String , parameters: Any ?)","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-algorithm-identifier/-init-/#init","text":"AlgorithmIdentifier(algorithm: String , parameters: Any ?)","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-algorithm-identifier/algorithm/","text":"certifikit / app.cash.certifikit / AlgorithmIdentifier / algorithm algorithm \u00b6 val algorithm: String An OID string like \u201c1.2.840.113549.1.1.11\u201d for sha256WithRSAEncryption.","title":"algorithm - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-algorithm-identifier/algorithm/#algorithm","text":"val algorithm: String An OID string like \u201c1.2.840.113549.1.1.11\u201d for sha256WithRSAEncryption.","title":"algorithm"},{"location":"0.x/certifikit/app.cash.certifikit/-algorithm-identifier/parameters/","text":"certifikit / app.cash.certifikit / AlgorithmIdentifier / parameters parameters \u00b6 val parameters: Any ? Parameters of a type implied by algorithm .","title":"parameters - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-algorithm-identifier/parameters/#parameters","text":"val parameters: Any ? Parameters of a type implied by algorithm .","title":"parameters"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/","text":"certifikit / app.cash.certifikit / AnyValue AnyValue \u00b6 data class AnyValue A value whose type is not specified statically. Use this with Adapters.any which will attempt to resolve a concrete type. Constructors \u00b6 Name Summary <init> A value whose type is not specified statically. Use this with Adapters.any which will attempt to resolve a concrete type. AnyValue(tagClass: Int , tag: Long , constructed: Boolean = false, length: Long = -1L, bytes: ByteString ) Properties \u00b6 Name Summary bytes val bytes: ByteString constructed var constructed: Boolean length var length: Long tag var tag: Long tagClass var tagClass: Int Functions \u00b6 Name Summary hashCode fun hashCode(): Int","title":"AnyValue - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/#anyvalue","text":"data class AnyValue A value whose type is not specified statically. Use this with Adapters.any which will attempt to resolve a concrete type.","title":"AnyValue"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/#constructors","text":"Name Summary <init> A value whose type is not specified statically. Use this with Adapters.any which will attempt to resolve a concrete type. AnyValue(tagClass: Int , tag: Long , constructed: Boolean = false, length: Long = -1L, bytes: ByteString )","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/#properties","text":"Name Summary bytes val bytes: ByteString constructed var constructed: Boolean length var length: Long tag var tag: Long tagClass var tagClass: Int","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/#functions","text":"Name Summary hashCode fun hashCode(): Int","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/-init-/","text":"certifikit / app.cash.certifikit / AnyValue / <init> <init> \u00b6 AnyValue(tagClass: Int , tag: Long , constructed: Boolean = false, length: Long = -1L, bytes: ByteString ) A value whose type is not specified statically. Use this with Adapters.any which will attempt to resolve a concrete type.","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/-init-/#init","text":"AnyValue(tagClass: Int , tag: Long , constructed: Boolean = false, length: Long = -1L, bytes: ByteString ) A value whose type is not specified statically. Use this with Adapters.any which will attempt to resolve a concrete type.","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/bytes/","text":"certifikit / app.cash.certifikit / AnyValue / bytes bytes \u00b6 val bytes: ByteString","title":"bytes - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/bytes/#bytes","text":"val bytes: ByteString","title":"bytes"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/constructed/","text":"certifikit / app.cash.certifikit / AnyValue / constructed constructed \u00b6 var constructed: Boolean","title":"constructed - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/constructed/#constructed","text":"var constructed: Boolean","title":"constructed"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/hash-code/","text":"certifikit / app.cash.certifikit / AnyValue / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/length/","text":"certifikit / app.cash.certifikit / AnyValue / length length \u00b6 var length: Long","title":"length - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/length/#length","text":"var length: Long","title":"length"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/tag-class/","text":"certifikit / app.cash.certifikit / AnyValue / tagClass tagClass \u00b6 var tagClass: Int","title":"tagClass - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/tag-class/#tagclass","text":"var tagClass: Int","title":"tagClass"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/tag/","text":"certifikit / app.cash.certifikit / AnyValue / tag tag \u00b6 var tag: Long","title":"tag - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-any-value/tag/#tag","text":"var tag: Long","title":"tag"},{"location":"0.x/certifikit/app.cash.certifikit/-attribute-type-and-value/","text":"certifikit / app.cash.certifikit / AttributeTypeAndValue AttributeTypeAndValue \u00b6 data class AttributeTypeAndValue Constructors \u00b6 Name Summary <init> AttributeTypeAndValue(type: String , value: Any ?) Properties \u00b6 Name Summary type An OID string like \u201c2.5.4.11\u201d for organizationalUnitName. val type: String value val value: Any ?","title":"AttributeTypeAndValue - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-attribute-type-and-value/#attributetypeandvalue","text":"data class AttributeTypeAndValue","title":"AttributeTypeAndValue"},{"location":"0.x/certifikit/app.cash.certifikit/-attribute-type-and-value/#constructors","text":"Name Summary <init> AttributeTypeAndValue(type: String , value: Any ?)","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-attribute-type-and-value/#properties","text":"Name Summary type An OID string like \u201c2.5.4.11\u201d for organizationalUnitName. val type: String value val value: Any ?","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-attribute-type-and-value/-init-/","text":"certifikit / app.cash.certifikit / AttributeTypeAndValue / <init> <init> \u00b6 AttributeTypeAndValue(type: String , value: Any ?)","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-attribute-type-and-value/-init-/#init","text":"AttributeTypeAndValue(type: String , value: Any ?)","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-attribute-type-and-value/type/","text":"certifikit / app.cash.certifikit / AttributeTypeAndValue / type type \u00b6 val type: String An OID string like \u201c2.5.4.11\u201d for organizationalUnitName.","title":"type - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-attribute-type-and-value/type/#type","text":"val type: String An OID string like \u201c2.5.4.11\u201d for organizationalUnitName.","title":"type"},{"location":"0.x/certifikit/app.cash.certifikit/-attribute-type-and-value/value/","text":"certifikit / app.cash.certifikit / AttributeTypeAndValue / value value \u00b6 val value: Any ?","title":"value - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-attribute-type-and-value/value/#value","text":"val value: Any ?","title":"value"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-constraints/","text":"certifikit / app.cash.certifikit / BasicConstraints BasicConstraints \u00b6 data class BasicConstraints Constructors \u00b6 Name Summary <init> BasicConstraints(ca: Boolean , maxIntermediateCas: Long ?) Properties \u00b6 Name Summary ca True if this certificate can be used as a Certificate Authority (CA). val ca: Boolean maxIntermediateCas The maximum number of intermediate CAs between this and leaf certificates. val maxIntermediateCas: Long ?","title":"BasicConstraints - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-constraints/#basicconstraints","text":"data class BasicConstraints","title":"BasicConstraints"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-constraints/#constructors","text":"Name Summary <init> BasicConstraints(ca: Boolean , maxIntermediateCas: Long ?)","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-constraints/#properties","text":"Name Summary ca True if this certificate can be used as a Certificate Authority (CA). val ca: Boolean maxIntermediateCas The maximum number of intermediate CAs between this and leaf certificates. val maxIntermediateCas: Long ?","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-constraints/-init-/","text":"certifikit / app.cash.certifikit / BasicConstraints / <init> <init> \u00b6 BasicConstraints(ca: Boolean , maxIntermediateCas: Long ?)","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-basic-constraints/-init-/#init","text":"BasicConstraints(ca: Boolean , maxIntermediateCas: Long ?)","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-constraints/ca/","text":"certifikit / app.cash.certifikit / BasicConstraints / ca ca \u00b6 val ca: Boolean True if this certificate can be used as a Certificate Authority (CA).","title":"ca - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-constraints/ca/#ca","text":"val ca: Boolean True if this certificate can be used as a Certificate Authority (CA).","title":"ca"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-constraints/max-intermediate-cas/","text":"certifikit / app.cash.certifikit / BasicConstraints / maxIntermediateCas maxIntermediateCas \u00b6 val maxIntermediateCas: Long ? The maximum number of intermediate CAs between this and leaf certificates.","title":"maxIntermediateCas - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-constraints/max-intermediate-cas/#maxintermediatecas","text":"val maxIntermediateCas: Long ? The maximum number of intermediate CAs between this and leaf certificates.","title":"maxIntermediateCas"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/","text":"certifikit / app.cash.certifikit / BasicDerAdapter BasicDerAdapter \u00b6 data class BasicDerAdapter<T> : DerAdapter<T> Handles basic types that always use the same tag. This supports optional types and may set a type hint for further adapters to process. Types like ANY and CHOICE that don\u2019t have a consistent tag cannot use this. Types \u00b6 Name Summary Codec Reads and writes values without knowledge of the enclosing tag, length, or defaults. interface Codec<T> Constructors \u00b6 Name Summary <init> Handles basic types that always use the same tag. This supports optional types and may set a type hint for further adapters to process. BasicDerAdapter(name: String , tagClass: Int , tag: Long , codec: Codec<T>, isOptional: Boolean = false, defaultValue: T? = null, typeHint: Boolean = false) Properties \u00b6 Name Summary defaultValue The value to return if this value is absent. Undefined unless this is optional. val defaultValue: T? isOptional True if the default value should be used if this value is absent during decoding. val isOptional: Boolean tag The tag this adapter expects, or -1 to match any tag. val tag: Long tagClass The tag class this adapter expects, or -1 to match any tag class. val tagClass: Int Functions \u00b6 Name Summary asTypeHint Returns a copy of this adapter that sets the encoded or decoded value as the type hint for the other adapters on this SEQUENCE to interrogate. fun asTypeHint(): BasicDerAdapter <T> fromDer Returns a value from this adapter. fun fromDer(reader: DerReader ): T hashCode fun hashCode(): Int matches Returns true if this adapter can read header in a choice. fun matches(header: DerHeader ): Boolean optional Returns a copy of this adapter that doesn\u2019t encode values equal to defaultValue . fun optional(defaultValue: T? = null): BasicDerAdapter <T> toDer Writes value to this adapter, unless it is the default value and can be safely omitted. fun toDer(writer: DerWriter , value: T): Unit toString fun toString(): String withTag Returns a copy with a context tag. This should be used when the type is ambiguous on its own. For example, the tags in this schema are 0 and 1: fun withTag(tagClass: Int = DerHeader.TAG_CLASS_CONTEXT_SPECIFIC, tag: Long ): BasicDerAdapter <T>","title":"BasicDerAdapter - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/#basicderadapter","text":"data class BasicDerAdapter<T> : DerAdapter<T> Handles basic types that always use the same tag. This supports optional types and may set a type hint for further adapters to process. Types like ANY and CHOICE that don\u2019t have a consistent tag cannot use this.","title":"BasicDerAdapter"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/#types","text":"Name Summary Codec Reads and writes values without knowledge of the enclosing tag, length, or defaults. interface Codec<T>","title":"Types"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/#constructors","text":"Name Summary <init> Handles basic types that always use the same tag. This supports optional types and may set a type hint for further adapters to process. BasicDerAdapter(name: String , tagClass: Int , tag: Long , codec: Codec<T>, isOptional: Boolean = false, defaultValue: T? = null, typeHint: Boolean = false)","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/#properties","text":"Name Summary defaultValue The value to return if this value is absent. Undefined unless this is optional. val defaultValue: T? isOptional True if the default value should be used if this value is absent during decoding. val isOptional: Boolean tag The tag this adapter expects, or -1 to match any tag. val tag: Long tagClass The tag class this adapter expects, or -1 to match any tag class. val tagClass: Int","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/#functions","text":"Name Summary asTypeHint Returns a copy of this adapter that sets the encoded or decoded value as the type hint for the other adapters on this SEQUENCE to interrogate. fun asTypeHint(): BasicDerAdapter <T> fromDer Returns a value from this adapter. fun fromDer(reader: DerReader ): T hashCode fun hashCode(): Int matches Returns true if this adapter can read header in a choice. fun matches(header: DerHeader ): Boolean optional Returns a copy of this adapter that doesn\u2019t encode values equal to defaultValue . fun optional(defaultValue: T? = null): BasicDerAdapter <T> toDer Writes value to this adapter, unless it is the default value and can be safely omitted. fun toDer(writer: DerWriter , value: T): Unit toString fun toString(): String withTag Returns a copy with a context tag. This should be used when the type is ambiguous on its own. For example, the tags in this schema are 0 and 1: fun withTag(tagClass: Int = DerHeader.TAG_CLASS_CONTEXT_SPECIFIC, tag: Long ): BasicDerAdapter <T>","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/-init-/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / <init> <init> \u00b6 BasicDerAdapter(name: String , tagClass: Int , tag: Long , codec: Codec<T>, isOptional: Boolean = false, defaultValue: T? = null, typeHint: Boolean = false) Handles basic types that always use the same tag. This supports optional types and may set a type hint for further adapters to process. Types like ANY and CHOICE that don\u2019t have a consistent tag cannot use this.","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/-init-/#init","text":"BasicDerAdapter(name: String , tagClass: Int , tag: Long , codec: Codec<T>, isOptional: Boolean = false, defaultValue: T? = null, typeHint: Boolean = false) Handles basic types that always use the same tag. This supports optional types and may set a type hint for further adapters to process. Types like ANY and CHOICE that don\u2019t have a consistent tag cannot use this.","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/as-type-hint/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / asTypeHint asTypeHint \u00b6 fun asTypeHint(): BasicDerAdapter <T> Returns a copy of this adapter that sets the encoded or decoded value as the type hint for the other adapters on this SEQUENCE to interrogate.","title":"asTypeHint - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/as-type-hint/#astypehint","text":"fun asTypeHint(): BasicDerAdapter <T> Returns a copy of this adapter that sets the encoded or decoded value as the type hint for the other adapters on this SEQUENCE to interrogate.","title":"asTypeHint"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/default-value/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / defaultValue defaultValue \u00b6 val defaultValue: T? The value to return if this value is absent. Undefined unless this is optional.","title":"defaultValue - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/default-value/#defaultvalue","text":"val defaultValue: T? The value to return if this value is absent. Undefined unless this is optional.","title":"defaultValue"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/from-der/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / fromDer fromDer \u00b6 fun fromDer(reader: DerReader ): T Returns a value from this adapter. This must always return a value, though it doesn\u2019t necessarily need to consume data from reader . For example, if the reader\u2019s peeked tag isn\u2019t readable by this adapter, it may return a default value. If this does read a value, it starts with the tag and length, and reads an entire value, including any potential composed values. If there\u2019s nothing to read and no default value, this will throw an exception.","title":"fromDer - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/from-der/#fromder","text":"fun fromDer(reader: DerReader ): T Returns a value from this adapter. This must always return a value, though it doesn\u2019t necessarily need to consume data from reader . For example, if the reader\u2019s peeked tag isn\u2019t readable by this adapter, it may return a default value. If this does read a value, it starts with the tag and length, and reads an entire value, including any potential composed values. If there\u2019s nothing to read and no default value, this will throw an exception.","title":"fromDer"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/hash-code/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/is-optional/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / isOptional isOptional \u00b6 val isOptional: Boolean True if the default value should be used if this value is absent during decoding.","title":"isOptional - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/is-optional/#isoptional","text":"val isOptional: Boolean True if the default value should be used if this value is absent during decoding.","title":"isOptional"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/matches/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / matches matches \u00b6 fun matches(header: DerHeader ): Boolean Returns true if this adapter can read header in a choice.","title":"matches - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/matches/#matches","text":"fun matches(header: DerHeader ): Boolean Returns true if this adapter can read header in a choice.","title":"matches"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/optional/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / optional optional \u00b6 fun optional(defaultValue: T? = null): BasicDerAdapter <T> Returns a copy of this adapter that doesn\u2019t encode values equal to defaultValue .","title":"optional - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/optional/#optional","text":"fun optional(defaultValue: T? = null): BasicDerAdapter <T> Returns a copy of this adapter that doesn\u2019t encode values equal to defaultValue .","title":"optional"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/tag-class/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / tagClass tagClass \u00b6 val tagClass: Int The tag class this adapter expects, or -1 to match any tag class.","title":"tagClass - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/tag-class/#tagclass","text":"val tagClass: Int The tag class this adapter expects, or -1 to match any tag class.","title":"tagClass"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/tag/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / tag tag \u00b6 val tag: Long The tag this adapter expects, or -1 to match any tag.","title":"tag - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/tag/#tag","text":"val tag: Long The tag this adapter expects, or -1 to match any tag.","title":"tag"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/to-der/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / toDer toDer \u00b6 fun toDer(writer: DerWriter , value: T): Unit Writes value to this adapter, unless it is the default value and can be safely omitted. If this does write a value, it will write a tag and a length and a full value.","title":"toDer - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/to-der/#toder","text":"fun toDer(writer: DerWriter , value: T): Unit Writes value to this adapter, unless it is the default value and can be safely omitted. If this does write a value, it will write a tag and a length and a full value.","title":"toDer"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/to-string/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / toString toString \u00b6 fun toString(): String","title":"toString - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/with-tag/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / withTag withTag \u00b6 fun withTag(tagClass: Int = DerHeader.TAG_CLASS_CONTEXT_SPECIFIC, tag: Long ): BasicDerAdapter <T> Returns a copy with a context tag. This should be used when the type is ambiguous on its own. For example, the tags in this schema are 0 and 1: Point ::= SEQUENCE { x [0] INTEGER OPTIONAL, y [1] INTEGER OPTIONAL } You may also specify a tag class like DerHeader.TAG_CLASS_APPLICATION . The default tag class is DerHeader.TAG_CLASS_CONTEXT_SPECIFIC . Point ::= SEQUENCE { x [APPLICATION 0] INTEGER OPTIONAL, y [APPLICATION 1] INTEGER OPTIONAL }","title":"withTag - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/with-tag/#withtag","text":"fun withTag(tagClass: Int = DerHeader.TAG_CLASS_CONTEXT_SPECIFIC, tag: Long ): BasicDerAdapter <T> Returns a copy with a context tag. This should be used when the type is ambiguous on its own. For example, the tags in this schema are 0 and 1: Point ::= SEQUENCE { x [0] INTEGER OPTIONAL, y [1] INTEGER OPTIONAL } You may also specify a tag class like DerHeader.TAG_CLASS_APPLICATION . The default tag class is DerHeader.TAG_CLASS_CONTEXT_SPECIFIC . Point ::= SEQUENCE { x [APPLICATION 0] INTEGER OPTIONAL, y [APPLICATION 1] INTEGER OPTIONAL }","title":"withTag"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/-codec/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / Codec Codec \u00b6 interface Codec<T> Reads and writes values without knowledge of the enclosing tag, length, or defaults. Functions \u00b6 Name Summary decode abstract fun decode(reader: DerReader ): T encode abstract fun encode(writer: DerWriter , value: T): Unit","title":"Codec - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/-codec/#codec","text":"interface Codec<T> Reads and writes values without knowledge of the enclosing tag, length, or defaults.","title":"Codec"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/-codec/#functions","text":"Name Summary decode abstract fun decode(reader: DerReader ): T encode abstract fun encode(writer: DerWriter , value: T): Unit","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/-codec/decode/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / Codec / decode decode \u00b6 abstract fun decode(reader: DerReader ): T","title":"decode - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/-codec/decode/#decode","text":"abstract fun decode(reader: DerReader ): T","title":"decode"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/-codec/encode/","text":"certifikit / app.cash.certifikit / BasicDerAdapter / Codec / encode encode \u00b6 abstract fun encode(writer: DerWriter , value: T): Unit","title":"encode - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-basic-der-adapter/-codec/encode/#encode","text":"abstract fun encode(writer: DerWriter , value: T): Unit","title":"encode"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/","text":"certifikit / app.cash.certifikit / BitString BitString \u00b6 data class BitString Like a ByteString , but whose bits are not necessarily a strict multiple of 8. Constructors \u00b6 Name Summary <init> Like a ByteString , but whose bits are not necessarily a strict multiple of 8. BitString(byteString: ByteString , unusedBitsCount: Int = 0) Properties \u00b6 Name Summary bitSet val bitSet: List < Int > byteString val byteString: ByteString unusedBitsCount 0-7 unused bits in the last byte. val unusedBitsCount: Int Functions \u00b6 Name Summary hashCode fun hashCode(): Int Extension Functions \u00b6 Name Summary decodeKeyUsage fun BitString .decodeKeyUsage(): List < KeyUsage >","title":"BitString - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/#bitstring","text":"data class BitString Like a ByteString , but whose bits are not necessarily a strict multiple of 8.","title":"BitString"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/#constructors","text":"Name Summary <init> Like a ByteString , but whose bits are not necessarily a strict multiple of 8. BitString(byteString: ByteString , unusedBitsCount: Int = 0)","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/#properties","text":"Name Summary bitSet val bitSet: List < Int > byteString val byteString: ByteString unusedBitsCount 0-7 unused bits in the last byte. val unusedBitsCount: Int","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/#functions","text":"Name Summary hashCode fun hashCode(): Int","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/#extension-functions","text":"Name Summary decodeKeyUsage fun BitString .decodeKeyUsage(): List < KeyUsage >","title":"Extension Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/-init-/","text":"certifikit / app.cash.certifikit / BitString / <init> <init> \u00b6 BitString(byteString: ByteString , unusedBitsCount: Int = 0) Like a ByteString , but whose bits are not necessarily a strict multiple of 8.","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/-init-/#init","text":"BitString(byteString: ByteString , unusedBitsCount: Int = 0) Like a ByteString , but whose bits are not necessarily a strict multiple of 8.","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/bit-set/","text":"certifikit / app.cash.certifikit / BitString / bitSet bitSet \u00b6 val bitSet: List < Int >","title":"bitSet - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/bit-set/#bitset","text":"val bitSet: List < Int >","title":"bitSet"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/byte-string/","text":"certifikit / app.cash.certifikit / BitString / byteString byteString \u00b6 val byteString: ByteString","title":"byteString - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/byte-string/#bytestring","text":"val byteString: ByteString","title":"byteString"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/hash-code/","text":"certifikit / app.cash.certifikit / BitString / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/unused-bits-count/","text":"certifikit / app.cash.certifikit / BitString / unusedBitsCount unusedBitsCount \u00b6 val unusedBitsCount: Int 0-7 unused bits in the last byte.","title":"unusedBitsCount - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-bit-string/unused-bits-count/#unusedbitscount","text":"val unusedBitsCount: Int 0-7 unused bits in the last byte.","title":"unusedBitsCount"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/","text":"certifikit / app.cash.certifikit / Certificate Certificate \u00b6 data class Certificate Constructors \u00b6 Name Summary <init> Certificate(tbsCertificate: TbsCertificate , signatureAlgorithm: AlgorithmIdentifier , signatureValue: BitString ) Properties \u00b6 Name Summary authorityInfoAccess val authorityInfoAccess: List < AccessDescription >? basicConstraints val basicConstraints: BasicConstraints ? commonName val commonName: String ? extKeyUsage val extKeyUsage: List < ExtKeyUsage >? issuerCommonName val issuerCommonName: String ? keyUsage val keyUsage: BitString ? organizationalUnitName val organizationalUnitName: String ? serialNumberString val serialNumberString: String signatureAlgorithm val signatureAlgorithm: AlgorithmIdentifier signatureValue val signatureValue: BitString subjectAlternativeNames val subjectAlternativeNames: List < Pair < Any , Any >>? tbsCertificate val tbsCertificate: TbsCertificate Functions \u00b6 Name Summary checkSignature Returns true if the certificate was signed by issuer . fun checkSignature(issuer: PublicKey ): Boolean publicKeySha256 Certificate hash as used in HTTP Public Key Pinning. fun publicKeySha256(): ByteString toX509Certificate fun toX509Certificate(): X509Certificate","title":"Certificate - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/#certificate","text":"data class Certificate","title":"Certificate"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/#constructors","text":"Name Summary <init> Certificate(tbsCertificate: TbsCertificate , signatureAlgorithm: AlgorithmIdentifier , signatureValue: BitString )","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/#properties","text":"Name Summary authorityInfoAccess val authorityInfoAccess: List < AccessDescription >? basicConstraints val basicConstraints: BasicConstraints ? commonName val commonName: String ? extKeyUsage val extKeyUsage: List < ExtKeyUsage >? issuerCommonName val issuerCommonName: String ? keyUsage val keyUsage: BitString ? organizationalUnitName val organizationalUnitName: String ? serialNumberString val serialNumberString: String signatureAlgorithm val signatureAlgorithm: AlgorithmIdentifier signatureValue val signatureValue: BitString subjectAlternativeNames val subjectAlternativeNames: List < Pair < Any , Any >>? tbsCertificate val tbsCertificate: TbsCertificate","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/#functions","text":"Name Summary checkSignature Returns true if the certificate was signed by issuer . fun checkSignature(issuer: PublicKey ): Boolean publicKeySha256 Certificate hash as used in HTTP Public Key Pinning. fun publicKeySha256(): ByteString toX509Certificate fun toX509Certificate(): X509Certificate","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/-init-/","text":"certifikit / app.cash.certifikit / Certificate / <init> <init> \u00b6 Certificate(tbsCertificate: TbsCertificate , signatureAlgorithm: AlgorithmIdentifier , signatureValue: BitString )","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/-init-/#init","text":"Certificate(tbsCertificate: TbsCertificate , signatureAlgorithm: AlgorithmIdentifier , signatureValue: BitString )","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/authority-info-access/","text":"certifikit / app.cash.certifikit / Certificate / authorityInfoAccess authorityInfoAccess \u00b6 val authorityInfoAccess: List < AccessDescription >?","title":"authorityInfoAccess - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/authority-info-access/#authorityinfoaccess","text":"val authorityInfoAccess: List < AccessDescription >?","title":"authorityInfoAccess"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/basic-constraints/","text":"certifikit / app.cash.certifikit / Certificate / basicConstraints basicConstraints \u00b6 val basicConstraints: BasicConstraints ?","title":"basicConstraints - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/basic-constraints/#basicconstraints","text":"val basicConstraints: BasicConstraints ?","title":"basicConstraints"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/check-signature/","text":"certifikit / app.cash.certifikit / Certificate / checkSignature checkSignature \u00b6 fun checkSignature(issuer: PublicKey ): Boolean Returns true if the certificate was signed by issuer .","title":"checkSignature - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/check-signature/#checksignature","text":"fun checkSignature(issuer: PublicKey ): Boolean Returns true if the certificate was signed by issuer .","title":"checkSignature"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/common-name/","text":"certifikit / app.cash.certifikit / Certificate / commonName commonName \u00b6 val commonName: String ?","title":"commonName - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/common-name/#commonname","text":"val commonName: String ?","title":"commonName"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/ext-key-usage/","text":"certifikit / app.cash.certifikit / Certificate / extKeyUsage extKeyUsage \u00b6 val extKeyUsage: List < ExtKeyUsage >?","title":"extKeyUsage - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/ext-key-usage/#extkeyusage","text":"val extKeyUsage: List < ExtKeyUsage >?","title":"extKeyUsage"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/issuer-common-name/","text":"certifikit / app.cash.certifikit / Certificate / issuerCommonName issuerCommonName \u00b6 val issuerCommonName: String ?","title":"issuerCommonName - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/issuer-common-name/#issuercommonname","text":"val issuerCommonName: String ?","title":"issuerCommonName"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/key-usage/","text":"certifikit / app.cash.certifikit / Certificate / keyUsage keyUsage \u00b6 val keyUsage: BitString ?","title":"keyUsage - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/key-usage/#keyusage","text":"val keyUsage: BitString ?","title":"keyUsage"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/organizational-unit-name/","text":"certifikit / app.cash.certifikit / Certificate / organizationalUnitName organizationalUnitName \u00b6 val organizationalUnitName: String ?","title":"organizationalUnitName - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/organizational-unit-name/#organizationalunitname","text":"val organizationalUnitName: String ?","title":"organizationalUnitName"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/public-key-sha256/","text":"certifikit / app.cash.certifikit / Certificate / publicKeySha256 publicKeySha256 \u00b6 fun publicKeySha256(): ByteString Certificate hash as used in HTTP Public Key Pinning.","title":"publicKeySha256 - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/public-key-sha256/#publickeysha256","text":"fun publicKeySha256(): ByteString Certificate hash as used in HTTP Public Key Pinning.","title":"publicKeySha256"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/serial-number-string/","text":"certifikit / app.cash.certifikit / Certificate / serialNumberString serialNumberString \u00b6 val serialNumberString: String","title":"serialNumberString - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/serial-number-string/#serialnumberstring","text":"val serialNumberString: String","title":"serialNumberString"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/signature-algorithm/","text":"certifikit / app.cash.certifikit / Certificate / signatureAlgorithm signatureAlgorithm \u00b6 val signatureAlgorithm: AlgorithmIdentifier","title":"signatureAlgorithm - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/signature-algorithm/#signaturealgorithm","text":"val signatureAlgorithm: AlgorithmIdentifier","title":"signatureAlgorithm"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/signature-value/","text":"certifikit / app.cash.certifikit / Certificate / signatureValue signatureValue \u00b6 val signatureValue: BitString","title":"signatureValue - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/signature-value/#signaturevalue","text":"val signatureValue: BitString","title":"signatureValue"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/subject-alternative-names/","text":"certifikit / app.cash.certifikit / Certificate / subjectAlternativeNames subjectAlternativeNames \u00b6 val subjectAlternativeNames: List < Pair < Any , Any >>?","title":"subjectAlternativeNames - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/subject-alternative-names/#subjectalternativenames","text":"val subjectAlternativeNames: List < Pair < Any , Any >>?","title":"subjectAlternativeNames"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/tbs-certificate/","text":"certifikit / app.cash.certifikit / Certificate / tbsCertificate tbsCertificate \u00b6 val tbsCertificate: TbsCertificate","title":"tbsCertificate - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/tbs-certificate/#tbscertificate","text":"val tbsCertificate: TbsCertificate","title":"tbsCertificate"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/to-x509-certificate/","text":"certifikit / app.cash.certifikit / Certificate / toX509Certificate toX509Certificate \u00b6 fun toX509Certificate(): X509Certificate","title":"toX509Certificate - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate/to-x509-certificate/#tox509certificate","text":"fun toX509Certificate(): X509Certificate","title":"toX509Certificate"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate-adapters/","text":"certifikit / app.cash.certifikit / CertificateAdapters CertificateAdapters \u00b6 object CertificateAdapters ASN.1 adapters adapted from the specifications in RFC 5280 . Properties \u00b6 Name Summary certificate Certificate ::= SEQUENCE { tbsCertificate TBSCertificate, signatureAlgorithm AlgorithmIdentifier, signatureValue BIT STRING } <br>``` <br>`val certificate: `[`BasicDerAdapter`](../-basic-der-adapter/index.md)`<`[`Certificate`](../-certificate/index.md)`>` | | [subjectPublicKeyInfo](subject-public-key-info.md) | SubjectPublicKeyInfo ::= SEQUENCE { algorithm AlgorithmIdentifier, subjectPublicKey BIT STRING } `` <br> val subjectPublicKeyInfo: [ BasicDerAdapter ](../-basic-der-adapter/index.md) < [ SubjectPublicKeyInfo ](../-subject-public-key-info/index.md) >` | | tbsCertificate | TBSCertificate ::= SEQUENCE { version [0] EXPLICIT Version DEFAULT v1, serialNumber CertificateSerialNumber, signature AlgorithmIdentifier, issuer Name, validity Validity, subject Name, subjectPublicKeyInfo SubjectPublicKeyInfo, issuerUniqueID [1] IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version MUST be v2 or v3 subjectUniqueID [2] IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version MUST be v2 or v3 extensions [3] EXPLICIT Extensions OPTIONAL -- If present, version MUST be v3 } <br> val tbsCertificate: BasicDerAdapter < TbsCertificate > |","title":"CertificateAdapters - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate-adapters/#certificateadapters","text":"object CertificateAdapters ASN.1 adapters adapted from the specifications in RFC 5280 .","title":"CertificateAdapters"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate-adapters/#properties","text":"Name Summary certificate Certificate ::= SEQUENCE { tbsCertificate TBSCertificate, signatureAlgorithm AlgorithmIdentifier, signatureValue BIT STRING } <br>``` <br>`val certificate: `[`BasicDerAdapter`](../-basic-der-adapter/index.md)`<`[`Certificate`](../-certificate/index.md)`>` | | [subjectPublicKeyInfo](subject-public-key-info.md) | SubjectPublicKeyInfo ::= SEQUENCE { algorithm AlgorithmIdentifier, subjectPublicKey BIT STRING } `` <br> val subjectPublicKeyInfo: [ BasicDerAdapter ](../-basic-der-adapter/index.md) < [ SubjectPublicKeyInfo ](../-subject-public-key-info/index.md) >` | | tbsCertificate | TBSCertificate ::= SEQUENCE { version [0] EXPLICIT Version DEFAULT v1, serialNumber CertificateSerialNumber, signature AlgorithmIdentifier, issuer Name, validity Validity, subject Name, subjectPublicKeyInfo SubjectPublicKeyInfo, issuerUniqueID [1] IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version MUST be v2 or v3 subjectUniqueID [2] IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version MUST be v2 or v3 extensions [3] EXPLICIT Extensions OPTIONAL -- If present, version MUST be v3 } <br> val tbsCertificate: BasicDerAdapter < TbsCertificate > |","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate-adapters/certificate/","text":"certifikit / app.cash.certifikit / CertificateAdapters / certificate certificate \u00b6 val certificate: BasicDerAdapter < Certificate > Certificate ::= SEQUENCE { tbsCertificate TBSCertificate, signatureAlgorithm AlgorithmIdentifier, signatureValue BIT STRING }","title":"certificate - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate-adapters/certificate/#certificate","text":"val certificate: BasicDerAdapter < Certificate > Certificate ::= SEQUENCE { tbsCertificate TBSCertificate, signatureAlgorithm AlgorithmIdentifier, signatureValue BIT STRING }","title":"certificate"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate-adapters/subject-public-key-info/","text":"certifikit / app.cash.certifikit / CertificateAdapters / subjectPublicKeyInfo subjectPublicKeyInfo \u00b6 val subjectPublicKeyInfo: BasicDerAdapter < SubjectPublicKeyInfo > SubjectPublicKeyInfo ::= SEQUENCE { algorithm AlgorithmIdentifier, subjectPublicKey BIT STRING }","title":"subjectPublicKeyInfo - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate-adapters/subject-public-key-info/#subjectpublickeyinfo","text":"val subjectPublicKeyInfo: BasicDerAdapter < SubjectPublicKeyInfo > SubjectPublicKeyInfo ::= SEQUENCE { algorithm AlgorithmIdentifier, subjectPublicKey BIT STRING }","title":"subjectPublicKeyInfo"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate-adapters/tbs-certificate/","text":"certifikit / app.cash.certifikit / CertificateAdapters / tbsCertificate tbsCertificate \u00b6 val tbsCertificate: BasicDerAdapter < TbsCertificate > TBSCertificate ::= SEQUENCE { version [0] EXPLICIT Version DEFAULT v1, serialNumber CertificateSerialNumber, signature AlgorithmIdentifier, issuer Name, validity Validity, subject Name, subjectPublicKeyInfo SubjectPublicKeyInfo, issuerUniqueID [1] IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version MUST be v2 or v3 subjectUniqueID [2] IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version MUST be v2 or v3 extensions [3] EXPLICIT Extensions OPTIONAL -- If present, version MUST be v3 }","title":"tbsCertificate - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certificate-adapters/tbs-certificate/#tbscertificate","text":"val tbsCertificate: BasicDerAdapter < TbsCertificate > TBSCertificate ::= SEQUENCE { version [0] EXPLICIT Version DEFAULT v1, serialNumber CertificateSerialNumber, signature AlgorithmIdentifier, issuer Name, validity Validity, subject Name, subjectPublicKeyInfo SubjectPublicKeyInfo, issuerUniqueID [1] IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version MUST be v2 or v3 subjectUniqueID [2] IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version MUST be v2 or v3 extensions [3] EXPLICIT Extensions OPTIONAL -- If present, version MUST be v3 }","title":"tbsCertificate"},{"location":"0.x/certifikit/app.cash.certifikit/-certifikit/","text":"certifikit / app.cash.certifikit / Certifikit Certifikit \u00b6 object Certifikit Properties \u00b6 Name Summary VERSION This is a string like \u201c4.5.0-RC1\u201d, \u201c4.5.0\u201d, or \u201c4.6.0-SNAPSHOT\u201d indicating the version of Certifikit in the current runtime. const val VERSION: String","title":"Certifikit - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certifikit/#certifikit","text":"object Certifikit","title":"Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certifikit/#properties","text":"Name Summary VERSION This is a string like \u201c4.5.0-RC1\u201d, \u201c4.5.0\u201d, or \u201c4.6.0-SNAPSHOT\u201d indicating the version of Certifikit in the current runtime. const val VERSION: String","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-certifikit/-v-e-r-s-i-o-n/","text":"certifikit / app.cash.certifikit / Certifikit / VERSION VERSION \u00b6 const val VERSION: String This is a string like \u201c4.5.0-RC1\u201d, \u201c4.5.0\u201d, or \u201c4.6.0-SNAPSHOT\u201d indicating the version of Certifikit in the current runtime. Official Certifikit releases follow semantic versioning . Versions with the -SNAPSHOT qualifier are not unique and should only be used in development environments. If you create custom builds of Certifikit please include a qualifier your version name, like \u201c4.7.0-mycompany.3\u201d. The version string is configured in the root project\u2019s build.gradle . Note that Certifikit\u2019s runtime version may be different from the version specified in your project\u2019s build file due to the dependency resolution features of your build tool.","title":"VERSION - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-certifikit/-v-e-r-s-i-o-n/#version","text":"const val VERSION: String This is a string like \u201c4.5.0-RC1\u201d, \u201c4.5.0\u201d, or \u201c4.6.0-SNAPSHOT\u201d indicating the version of Certifikit in the current runtime. Official Certifikit releases follow semantic versioning . Versions with the -SNAPSHOT qualifier are not unique and should only be used in development environments. If you create custom builds of Certifikit please include a qualifier your version name, like \u201c4.7.0-mycompany.3\u201d. The version string is configured in the root project\u2019s build.gradle . Note that Certifikit\u2019s runtime version may be different from the version specified in your project\u2019s build file due to the dependency resolution features of your build tool.","title":"VERSION"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/","text":"certifikit / app.cash.certifikit / DerHeader DerHeader \u00b6 data class DerHeader The first two bytes of each value is a header that includes its tag (field ID) and length. Constructors \u00b6 Name Summary <init> The first two bytes of each value is a header that includes its tag (field ID) and length. DerHeader(tagClass: Int , tag: Long , constructed: Boolean , length: Long ) Properties \u00b6 Name Summary constructed If the constructed bit is set it indicates that the value is composed of other values that have their own headers. var constructed: Boolean isEndOfData val isEndOfData: Boolean length Length of the message in bytes, or -1L if its length is unknown at the time of encoding. var length: Long tag Identifies which member in the ASN.1 schema the field holds. var tag: Long tagClass Namespace of the tag. var tagClass: Int Functions \u00b6 Name Summary hashCode fun hashCode(): Int toString fun toString(): String Companion Object Properties \u00b6 Name Summary TAG_CLASS_APPLICATION const val TAG_CLASS_APPLICATION: Int TAG_CLASS_CONTEXT_SPECIFIC const val TAG_CLASS_CONTEXT_SPECIFIC: Int TAG_CLASS_PRIVATE const val TAG_CLASS_PRIVATE: Int TAG_CLASS_UNIVERSAL const val TAG_CLASS_UNIVERSAL: Int TAG_END_OF_CONTENTS const val TAG_END_OF_CONTENTS: Long","title":"DerHeader - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/#derheader","text":"data class DerHeader The first two bytes of each value is a header that includes its tag (field ID) and length.","title":"DerHeader"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/#constructors","text":"Name Summary <init> The first two bytes of each value is a header that includes its tag (field ID) and length. DerHeader(tagClass: Int , tag: Long , constructed: Boolean , length: Long )","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/#properties","text":"Name Summary constructed If the constructed bit is set it indicates that the value is composed of other values that have their own headers. var constructed: Boolean isEndOfData val isEndOfData: Boolean length Length of the message in bytes, or -1L if its length is unknown at the time of encoding. var length: Long tag Identifies which member in the ASN.1 schema the field holds. var tag: Long tagClass Namespace of the tag. var tagClass: Int","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/#functions","text":"Name Summary hashCode fun hashCode(): Int toString fun toString(): String","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/#companion-object-properties","text":"Name Summary TAG_CLASS_APPLICATION const val TAG_CLASS_APPLICATION: Int TAG_CLASS_CONTEXT_SPECIFIC const val TAG_CLASS_CONTEXT_SPECIFIC: Int TAG_CLASS_PRIVATE const val TAG_CLASS_PRIVATE: Int TAG_CLASS_UNIVERSAL const val TAG_CLASS_UNIVERSAL: Int TAG_END_OF_CONTENTS const val TAG_END_OF_CONTENTS: Long","title":"Companion Object Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/-init-/","text":"certifikit / app.cash.certifikit / DerHeader / <init> <init> \u00b6 DerHeader(tagClass: Int , tag: Long , constructed: Boolean , length: Long ) The first two bytes of each value is a header that includes its tag (field ID) and length.","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/-init-/#init","text":"DerHeader(tagClass: Int , tag: Long , constructed: Boolean , length: Long ) The first two bytes of each value is a header that includes its tag (field ID) and length.","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/-t-a-g_-c-l-a-s-s_-a-p-p-l-i-c-a-t-i-o-n/","text":"certifikit / app.cash.certifikit / DerHeader / TAG_CLASS_APPLICATION TAG_CLASS_APPLICATION \u00b6 const val TAG_CLASS_APPLICATION: Int","title":"TAG_CLASS_APPLICATION - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/-t-a-g_-c-l-a-s-s_-a-p-p-l-i-c-a-t-i-o-n/#tag_class_application","text":"const val TAG_CLASS_APPLICATION: Int","title":"TAG_CLASS_APPLICATION"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/-t-a-g_-c-l-a-s-s_-c-o-n-t-e-x-t_-s-p-e-c-i-f-i-c/","text":"certifikit / app.cash.certifikit / DerHeader / TAG_CLASS_CONTEXT_SPECIFIC TAG_CLASS_CONTEXT_SPECIFIC \u00b6 const val TAG_CLASS_CONTEXT_SPECIFIC: Int","title":"TAG_CLASS_CONTEXT_SPECIFIC - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/-t-a-g_-c-l-a-s-s_-c-o-n-t-e-x-t_-s-p-e-c-i-f-i-c/#tag_class_context_specific","text":"const val TAG_CLASS_CONTEXT_SPECIFIC: Int","title":"TAG_CLASS_CONTEXT_SPECIFIC"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/-t-a-g_-c-l-a-s-s_-p-r-i-v-a-t-e/","text":"certifikit / app.cash.certifikit / DerHeader / TAG_CLASS_PRIVATE TAG_CLASS_PRIVATE \u00b6 const val TAG_CLASS_PRIVATE: Int","title":"TAG_CLASS_PRIVATE - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/-t-a-g_-c-l-a-s-s_-p-r-i-v-a-t-e/#tag_class_private","text":"const val TAG_CLASS_PRIVATE: Int","title":"TAG_CLASS_PRIVATE"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/-t-a-g_-c-l-a-s-s_-u-n-i-v-e-r-s-a-l/","text":"certifikit / app.cash.certifikit / DerHeader / TAG_CLASS_UNIVERSAL TAG_CLASS_UNIVERSAL \u00b6 const val TAG_CLASS_UNIVERSAL: Int","title":"TAG_CLASS_UNIVERSAL - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/-t-a-g_-c-l-a-s-s_-u-n-i-v-e-r-s-a-l/#tag_class_universal","text":"const val TAG_CLASS_UNIVERSAL: Int","title":"TAG_CLASS_UNIVERSAL"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/-t-a-g_-e-n-d_-o-f_-c-o-n-t-e-n-t-s/","text":"certifikit / app.cash.certifikit / DerHeader / TAG_END_OF_CONTENTS TAG_END_OF_CONTENTS \u00b6 const val TAG_END_OF_CONTENTS: Long","title":"TAG_END_OF_CONTENTS - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/-t-a-g_-e-n-d_-o-f_-c-o-n-t-e-n-t-s/#tag_end_of_contents","text":"const val TAG_END_OF_CONTENTS: Long","title":"TAG_END_OF_CONTENTS"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/constructed/","text":"certifikit / app.cash.certifikit / DerHeader / constructed constructed \u00b6 var constructed: Boolean If the constructed bit is set it indicates that the value is composed of other values that have their own headers. This value is encoded in bit 6 of the first byte of each value. 0bxx0xxxxx Primitive 0bxx1xxxxx Constructed","title":"constructed - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/constructed/#constructed","text":"var constructed: Boolean If the constructed bit is set it indicates that the value is composed of other values that have their own headers. This value is encoded in bit 6 of the first byte of each value. 0bxx0xxxxx Primitive 0bxx1xxxxx Constructed","title":"constructed"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/hash-code/","text":"certifikit / app.cash.certifikit / DerHeader / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/is-end-of-data/","text":"certifikit / app.cash.certifikit / DerHeader / isEndOfData isEndOfData \u00b6 val isEndOfData: Boolean","title":"isEndOfData - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/is-end-of-data/#isendofdata","text":"val isEndOfData: Boolean","title":"isEndOfData"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/length/","text":"certifikit / app.cash.certifikit / DerHeader / length length \u00b6 var length: Long Length of the message in bytes, or -1L if its length is unknown at the time of encoding.","title":"length - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/length/#length","text":"var length: Long Length of the message in bytes, or -1L if its length is unknown at the time of encoding.","title":"length"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/tag-class/","text":"certifikit / app.cash.certifikit / DerHeader / tagClass tagClass \u00b6 var tagClass: Int Namespace of the tag. This value is encoded in bits 7 and 8 of the first byte of each value. 0b00xxxxxx Universal 0b01xxxxxx Application 0b10xxxxxx Context-Specific 0b11xxxxxx Private","title":"tagClass - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/tag-class/#tagclass","text":"var tagClass: Int Namespace of the tag. This value is encoded in bits 7 and 8 of the first byte of each value. 0b00xxxxxx Universal 0b01xxxxxx Application 0b10xxxxxx Context-Specific 0b11xxxxxx Private","title":"tagClass"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/tag/","text":"certifikit / app.cash.certifikit / DerHeader / tag tag \u00b6 var tag: Long Identifies which member in the ASN.1 schema the field holds.","title":"tag - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/tag/#tag","text":"var tag: Long Identifies which member in the ASN.1 schema the field holds.","title":"tag"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/to-string/","text":"certifikit / app.cash.certifikit / DerHeader / toString toString \u00b6 fun toString(): String","title":"toString - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-header/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/","text":"certifikit / app.cash.certifikit / DerReader DerReader \u00b6 class DerReader Streaming decoder of data encoded following Abstract Syntax Notation One (ASN.1). There are multiple variants of ASN.1, including: DER: Distinguished Encoding Rules. This further constrains ASN.1 for deterministic encoding. BER: Basic Encoding Rules. This class was implemented according to the X.690 spec [ x690 ], and under the advice of Lets Encrypt\u2019s ASN.1 and DER guide. Constructors \u00b6 Name Summary <init> Streaming decoder of data encoded following Abstract Syntax Notation One (ASN.1). There are multiple variants of ASN.1, including: DerReader(source: Source ) Properties \u00b6 Name Summary typeHint The type hint for the current object. Used to pick adapters based on other fields, such as in extensions which have different types depending on their extension ID. var typeHint: Any ? Functions \u00b6 Name Summary hasNext fun hasNext(): Boolean peekHeader Returns the next header to process unless this scope is exhausted. fun peekHeader(): DerHeader ? readBigInteger fun readBigInteger(): BigInteger readBitString fun readBitString(): BitString readBoolean fun readBoolean(): Boolean readLong fun readLong(): Long readObjectIdentifier fun readObjectIdentifier(): String readOctetString fun readOctetString(): ByteString readRelativeObjectIdentifier fun readRelativeObjectIdentifier(): String readUnknown Read a value as bytes without interpretation of its contents. fun readUnknown(): ByteString readUtf8String fun readUtf8String(): String toString fun toString(): String withTypeHint Execute block with a new namespace for type hints. Type hints from the enclosing type are no longer usable by the current type\u2019s members. fun <T> withTypeHint(block: () -> T): T","title":"DerReader - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/#derreader","text":"class DerReader Streaming decoder of data encoded following Abstract Syntax Notation One (ASN.1). There are multiple variants of ASN.1, including: DER: Distinguished Encoding Rules. This further constrains ASN.1 for deterministic encoding. BER: Basic Encoding Rules. This class was implemented according to the X.690 spec [ x690 ], and under the advice of Lets Encrypt\u2019s ASN.1 and DER guide.","title":"DerReader"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/#constructors","text":"Name Summary <init> Streaming decoder of data encoded following Abstract Syntax Notation One (ASN.1). There are multiple variants of ASN.1, including: DerReader(source: Source )","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/#properties","text":"Name Summary typeHint The type hint for the current object. Used to pick adapters based on other fields, such as in extensions which have different types depending on their extension ID. var typeHint: Any ?","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/#functions","text":"Name Summary hasNext fun hasNext(): Boolean peekHeader Returns the next header to process unless this scope is exhausted. fun peekHeader(): DerHeader ? readBigInteger fun readBigInteger(): BigInteger readBitString fun readBitString(): BitString readBoolean fun readBoolean(): Boolean readLong fun readLong(): Long readObjectIdentifier fun readObjectIdentifier(): String readOctetString fun readOctetString(): ByteString readRelativeObjectIdentifier fun readRelativeObjectIdentifier(): String readUnknown Read a value as bytes without interpretation of its contents. fun readUnknown(): ByteString readUtf8String fun readUtf8String(): String toString fun toString(): String withTypeHint Execute block with a new namespace for type hints. Type hints from the enclosing type are no longer usable by the current type\u2019s members. fun <T> withTypeHint(block: () -> T): T","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/-init-/","text":"certifikit / app.cash.certifikit / DerReader / <init> <init> \u00b6 DerReader(source: Source ) Streaming decoder of data encoded following Abstract Syntax Notation One (ASN.1). There are multiple variants of ASN.1, including: DER: Distinguished Encoding Rules. This further constrains ASN.1 for deterministic encoding. BER: Basic Encoding Rules. This class was implemented according to the X.690 spec [ x690 ], and under the advice of Lets Encrypt\u2019s ASN.1 and DER guide.","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/-init-/#init","text":"DerReader(source: Source ) Streaming decoder of data encoded following Abstract Syntax Notation One (ASN.1). There are multiple variants of ASN.1, including: DER: Distinguished Encoding Rules. This further constrains ASN.1 for deterministic encoding. BER: Basic Encoding Rules. This class was implemented according to the X.690 spec [ x690 ], and under the advice of Lets Encrypt\u2019s ASN.1 and DER guide.","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/has-next/","text":"certifikit / app.cash.certifikit / DerReader / hasNext hasNext \u00b6 fun hasNext(): Boolean","title":"hasNext - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/has-next/#hasnext","text":"fun hasNext(): Boolean","title":"hasNext"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/peek-header/","text":"certifikit / app.cash.certifikit / DerReader / peekHeader peekHeader \u00b6 fun peekHeader(): DerHeader ? Returns the next header to process unless this scope is exhausted. This returns null if: The stream is exhausted. We\u2019ve read all of the bytes of an object whose length is known. We\u2019ve reached the DerHeader.TAG_END_OF_CONTENTS of an object whose length is unknown.","title":"peekHeader - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/peek-header/#peekheader","text":"fun peekHeader(): DerHeader ? Returns the next header to process unless this scope is exhausted. This returns null if: The stream is exhausted. We\u2019ve read all of the bytes of an object whose length is known. We\u2019ve reached the DerHeader.TAG_END_OF_CONTENTS of an object whose length is unknown.","title":"peekHeader"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-big-integer/","text":"certifikit / app.cash.certifikit / DerReader / readBigInteger readBigInteger \u00b6 fun readBigInteger(): BigInteger","title":"readBigInteger - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-big-integer/#readbiginteger","text":"fun readBigInteger(): BigInteger","title":"readBigInteger"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-bit-string/","text":"certifikit / app.cash.certifikit / DerReader / readBitString readBitString \u00b6 fun readBitString(): BitString","title":"readBitString - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-bit-string/#readbitstring","text":"fun readBitString(): BitString","title":"readBitString"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-boolean/","text":"certifikit / app.cash.certifikit / DerReader / readBoolean readBoolean \u00b6 fun readBoolean(): Boolean","title":"readBoolean - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-boolean/#readboolean","text":"fun readBoolean(): Boolean","title":"readBoolean"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-long/","text":"certifikit / app.cash.certifikit / DerReader / readLong readLong \u00b6 fun readLong(): Long","title":"readLong - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-long/#readlong","text":"fun readLong(): Long","title":"readLong"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-object-identifier/","text":"certifikit / app.cash.certifikit / DerReader / readObjectIdentifier readObjectIdentifier \u00b6 fun readObjectIdentifier(): String","title":"readObjectIdentifier - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-object-identifier/#readobjectidentifier","text":"fun readObjectIdentifier(): String","title":"readObjectIdentifier"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-octet-string/","text":"certifikit / app.cash.certifikit / DerReader / readOctetString readOctetString \u00b6 fun readOctetString(): ByteString","title":"readOctetString - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-octet-string/#readoctetstring","text":"fun readOctetString(): ByteString","title":"readOctetString"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-relative-object-identifier/","text":"certifikit / app.cash.certifikit / DerReader / readRelativeObjectIdentifier readRelativeObjectIdentifier \u00b6 fun readRelativeObjectIdentifier(): String","title":"readRelativeObjectIdentifier - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-relative-object-identifier/#readrelativeobjectidentifier","text":"fun readRelativeObjectIdentifier(): String","title":"readRelativeObjectIdentifier"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-unknown/","text":"certifikit / app.cash.certifikit / DerReader / readUnknown readUnknown \u00b6 fun readUnknown(): ByteString Read a value as bytes without interpretation of its contents.","title":"readUnknown - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-unknown/#readunknown","text":"fun readUnknown(): ByteString Read a value as bytes without interpretation of its contents.","title":"readUnknown"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-utf8-string/","text":"certifikit / app.cash.certifikit / DerReader / readUtf8String readUtf8String \u00b6 fun readUtf8String(): String","title":"readUtf8String - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/read-utf8-string/#readutf8string","text":"fun readUtf8String(): String","title":"readUtf8String"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/to-string/","text":"certifikit / app.cash.certifikit / DerReader / toString toString \u00b6 fun toString(): String","title":"toString - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/type-hint/","text":"certifikit / app.cash.certifikit / DerReader / typeHint typeHint \u00b6 var typeHint: Any ? The type hint for the current object. Used to pick adapters based on other fields, such as in extensions which have different types depending on their extension ID.","title":"typeHint - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/type-hint/#typehint","text":"var typeHint: Any ? The type hint for the current object. Used to pick adapters based on other fields, such as in extensions which have different types depending on their extension ID.","title":"typeHint"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/with-type-hint/","text":"certifikit / app.cash.certifikit / DerReader / withTypeHint withTypeHint \u00b6 fun <T> withTypeHint(block: () -> T): T Execute block with a new namespace for type hints. Type hints from the enclosing type are no longer usable by the current type\u2019s members.","title":"withTypeHint - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-reader/with-type-hint/#withtypehint","text":"fun <T> withTypeHint(block: () -> T): T Execute block with a new namespace for type hints. Type hints from the enclosing type are no longer usable by the current type\u2019s members.","title":"withTypeHint"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/","text":"certifikit / app.cash.certifikit / DerWriter DerWriter \u00b6 class DerWriter Constructors \u00b6 Name Summary <init> DerWriter(sink: BufferedSink ) Properties \u00b6 Name Summary constructed False unless we made a recursive call to write at the current stack frame. The explicit box adapter can clear this to synthesize non-constructed values that are embedded in octet strings. var constructed: Boolean typeHint The type hint for the current object. Used to pick adapters based on other fields, such as in extensions which have different types depending on their extension ID. var typeHint: Any ? Functions \u00b6 Name Summary toString fun toString(): String withTypeHint Execute block with a new namespace for type hints. Type hints from the enclosing type are no longer usable by the current type\u2019s members. fun <T> withTypeHint(block: () -> T): T write fun write(name: String , tagClass: Int , tag: Long , block: ( BufferedSink ) -> Unit ): Unit writeBigInteger fun writeBigInteger(value: BigInteger ): Unit writeBitString fun writeBitString(bitString: BitString ): Unit writeBoolean fun writeBoolean(b: Boolean ): Unit writeLong fun writeLong(v: Long ): Unit writeObjectIdentifier fun writeObjectIdentifier(s: String ): Unit writeOctetString fun writeOctetString(byteString: ByteString ): Unit writeRelativeObjectIdentifier fun writeRelativeObjectIdentifier(s: String ): Unit writeUtf8 fun writeUtf8(value: String ): Unit","title":"DerWriter - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/#derwriter","text":"class DerWriter","title":"DerWriter"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/#constructors","text":"Name Summary <init> DerWriter(sink: BufferedSink )","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/#properties","text":"Name Summary constructed False unless we made a recursive call to write at the current stack frame. The explicit box adapter can clear this to synthesize non-constructed values that are embedded in octet strings. var constructed: Boolean typeHint The type hint for the current object. Used to pick adapters based on other fields, such as in extensions which have different types depending on their extension ID. var typeHint: Any ?","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/#functions","text":"Name Summary toString fun toString(): String withTypeHint Execute block with a new namespace for type hints. Type hints from the enclosing type are no longer usable by the current type\u2019s members. fun <T> withTypeHint(block: () -> T): T write fun write(name: String , tagClass: Int , tag: Long , block: ( BufferedSink ) -> Unit ): Unit writeBigInteger fun writeBigInteger(value: BigInteger ): Unit writeBitString fun writeBitString(bitString: BitString ): Unit writeBoolean fun writeBoolean(b: Boolean ): Unit writeLong fun writeLong(v: Long ): Unit writeObjectIdentifier fun writeObjectIdentifier(s: String ): Unit writeOctetString fun writeOctetString(byteString: ByteString ): Unit writeRelativeObjectIdentifier fun writeRelativeObjectIdentifier(s: String ): Unit writeUtf8 fun writeUtf8(value: String ): Unit","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/-init-/","text":"certifikit / app.cash.certifikit / DerWriter / <init> <init> \u00b6 DerWriter(sink: BufferedSink )","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/-init-/#init","text":"DerWriter(sink: BufferedSink )","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/constructed/","text":"certifikit / app.cash.certifikit / DerWriter / constructed constructed \u00b6 var constructed: Boolean False unless we made a recursive call to write at the current stack frame. The explicit box adapter can clear this to synthesize non-constructed values that are embedded in octet strings.","title":"constructed - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/constructed/#constructed","text":"var constructed: Boolean False unless we made a recursive call to write at the current stack frame. The explicit box adapter can clear this to synthesize non-constructed values that are embedded in octet strings.","title":"constructed"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/to-string/","text":"certifikit / app.cash.certifikit / DerWriter / toString toString \u00b6 fun toString(): String","title":"toString - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/type-hint/","text":"certifikit / app.cash.certifikit / DerWriter / typeHint typeHint \u00b6 var typeHint: Any ? The type hint for the current object. Used to pick adapters based on other fields, such as in extensions which have different types depending on their extension ID.","title":"typeHint - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/type-hint/#typehint","text":"var typeHint: Any ? The type hint for the current object. Used to pick adapters based on other fields, such as in extensions which have different types depending on their extension ID.","title":"typeHint"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/with-type-hint/","text":"certifikit / app.cash.certifikit / DerWriter / withTypeHint withTypeHint \u00b6 fun <T> withTypeHint(block: () -> T): T Execute block with a new namespace for type hints. Type hints from the enclosing type are no longer usable by the current type\u2019s members.","title":"withTypeHint - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/with-type-hint/#withtypehint","text":"fun <T> withTypeHint(block: () -> T): T Execute block with a new namespace for type hints. Type hints from the enclosing type are no longer usable by the current type\u2019s members.","title":"withTypeHint"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-big-integer/","text":"certifikit / app.cash.certifikit / DerWriter / writeBigInteger writeBigInteger \u00b6 fun writeBigInteger(value: BigInteger ): Unit","title":"writeBigInteger - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-big-integer/#writebiginteger","text":"fun writeBigInteger(value: BigInteger ): Unit","title":"writeBigInteger"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-bit-string/","text":"certifikit / app.cash.certifikit / DerWriter / writeBitString writeBitString \u00b6 fun writeBitString(bitString: BitString ): Unit","title":"writeBitString - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-bit-string/#writebitstring","text":"fun writeBitString(bitString: BitString ): Unit","title":"writeBitString"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-boolean/","text":"certifikit / app.cash.certifikit / DerWriter / writeBoolean writeBoolean \u00b6 fun writeBoolean(b: Boolean ): Unit","title":"writeBoolean - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-boolean/#writeboolean","text":"fun writeBoolean(b: Boolean ): Unit","title":"writeBoolean"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-long/","text":"certifikit / app.cash.certifikit / DerWriter / writeLong writeLong \u00b6 fun writeLong(v: Long ): Unit","title":"writeLong - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-long/#writelong","text":"fun writeLong(v: Long ): Unit","title":"writeLong"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-object-identifier/","text":"certifikit / app.cash.certifikit / DerWriter / writeObjectIdentifier writeObjectIdentifier \u00b6 fun writeObjectIdentifier(s: String ): Unit","title":"writeObjectIdentifier - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-object-identifier/#writeobjectidentifier","text":"fun writeObjectIdentifier(s: String ): Unit","title":"writeObjectIdentifier"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-octet-string/","text":"certifikit / app.cash.certifikit / DerWriter / writeOctetString writeOctetString \u00b6 fun writeOctetString(byteString: ByteString ): Unit","title":"writeOctetString - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-octet-string/#writeoctetstring","text":"fun writeOctetString(byteString: ByteString ): Unit","title":"writeOctetString"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-relative-object-identifier/","text":"certifikit / app.cash.certifikit / DerWriter / writeRelativeObjectIdentifier writeRelativeObjectIdentifier \u00b6 fun writeRelativeObjectIdentifier(s: String ): Unit","title":"writeRelativeObjectIdentifier - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-relative-object-identifier/#writerelativeobjectidentifier","text":"fun writeRelativeObjectIdentifier(s: String ): Unit","title":"writeRelativeObjectIdentifier"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-utf8/","text":"certifikit / app.cash.certifikit / DerWriter / writeUtf8 writeUtf8 \u00b6 fun writeUtf8(value: String ): Unit","title":"writeUtf8 - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write-utf8/#writeutf8","text":"fun writeUtf8(value: String ): Unit","title":"writeUtf8"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write/","text":"certifikit / app.cash.certifikit / DerWriter / write write \u00b6 fun write(name: String , tagClass: Int , tag: Long , block: ( BufferedSink ) -> Unit ): Unit","title":"write - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-der-writer/write/#write","text":"fun write(name: String , tagClass: Int , tag: Long , block: ( BufferedSink ) -> Unit ): Unit","title":"write"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/","text":"certifikit / app.cash.certifikit / ExtKeyUsage ExtKeyUsage \u00b6 data class ExtKeyUsage Constructors \u00b6 Name Summary <init> ExtKeyUsage(objectIdentifier: String ) Properties \u00b6 Name Summary name val name: String ? objectIdentifier val objectIdentifier: String Functions \u00b6 Name Summary toString fun toString(): String Companion Object Properties \u00b6 Name Summary Known val Known: Map < String , String >","title":"ExtKeyUsage - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/#extkeyusage","text":"data class ExtKeyUsage","title":"ExtKeyUsage"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/#constructors","text":"Name Summary <init> ExtKeyUsage(objectIdentifier: String )","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/#properties","text":"Name Summary name val name: String ? objectIdentifier val objectIdentifier: String","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/#companion-object-properties","text":"Name Summary Known val Known: Map < String , String >","title":"Companion Object Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/-init-/","text":"certifikit / app.cash.certifikit / ExtKeyUsage / <init> <init> \u00b6 ExtKeyUsage(objectIdentifier: String )","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/-init-/#init","text":"ExtKeyUsage(objectIdentifier: String )","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/-known/","text":"certifikit / app.cash.certifikit / ExtKeyUsage / Known Known \u00b6 val Known: Map < String , String >","title":"Known - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/-known/#known","text":"val Known: Map < String , String >","title":"Known"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/name/","text":"certifikit / app.cash.certifikit / ExtKeyUsage / name name \u00b6 val name: String ?","title":"name - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/name/#name","text":"val name: String ?","title":"name"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/object-identifier/","text":"certifikit / app.cash.certifikit / ExtKeyUsage / objectIdentifier objectIdentifier \u00b6 val objectIdentifier: String","title":"objectIdentifier - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/object-identifier/#objectidentifier","text":"val objectIdentifier: String","title":"objectIdentifier"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/to-string/","text":"certifikit / app.cash.certifikit / ExtKeyUsage / toString toString \u00b6 fun toString(): String","title":"toString - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-ext-key-usage/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/certifikit/app.cash.certifikit/-extension/","text":"certifikit / app.cash.certifikit / Extension Extension \u00b6 data class Extension Constructors \u00b6 Name Summary <init> Extension(id: String , critical: Boolean , value: Any ?) Properties \u00b6 Name Summary critical val critical: Boolean id val id: String value val value: Any ?","title":"Extension - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-extension/#extension","text":"data class Extension","title":"Extension"},{"location":"0.x/certifikit/app.cash.certifikit/-extension/#constructors","text":"Name Summary <init> Extension(id: String , critical: Boolean , value: Any ?)","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-extension/#properties","text":"Name Summary critical val critical: Boolean id val id: String value val value: Any ?","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-extension/-init-/","text":"certifikit / app.cash.certifikit / Extension / <init> <init> \u00b6 Extension(id: String , critical: Boolean , value: Any ?)","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-extension/-init-/#init","text":"Extension(id: String , critical: Boolean , value: Any ?)","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-extension/critical/","text":"certifikit / app.cash.certifikit / Extension / critical critical \u00b6 val critical: Boolean","title":"critical - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-extension/critical/#critical","text":"val critical: Boolean","title":"critical"},{"location":"0.x/certifikit/app.cash.certifikit/-extension/id/","text":"certifikit / app.cash.certifikit / Extension / id id \u00b6 val id: String","title":"id - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-extension/id/#id","text":"val id: String","title":"id"},{"location":"0.x/certifikit/app.cash.certifikit/-extension/value/","text":"certifikit / app.cash.certifikit / Extension / value value \u00b6 val value: Any ?","title":"value - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-extension/value/#value","text":"val value: Any ?","title":"value"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/","text":"certifikit / app.cash.certifikit / KeyUsage KeyUsage \u00b6 enum class KeyUsage Enum Values \u00b6 Name Summary DigitalSignature NonRepudiation KeyEncipherment DataEncipherment KeyAgreement KeyCertSign CRLSign EncipherOnly DecipherOnly Properties \u00b6 Name Summary bit val bit: Int","title":"KeyUsage - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/#keyusage","text":"enum class KeyUsage","title":"KeyUsage"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/#enum-values","text":"Name Summary DigitalSignature NonRepudiation KeyEncipherment DataEncipherment KeyAgreement KeyCertSign CRLSign EncipherOnly DecipherOnly","title":"Enum Values"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/#properties","text":"Name Summary bit val bit: Int","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-c-r-l-sign/","text":"certifikit / app.cash.certifikit / KeyUsage / CRLSign CRLSign \u00b6 CRLSign","title":"CRLSign - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-c-r-l-sign/#crlsign","text":"CRLSign","title":"CRLSign"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-data-encipherment/","text":"certifikit / app.cash.certifikit / KeyUsage / DataEncipherment DataEncipherment \u00b6 DataEncipherment","title":"DataEncipherment - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-data-encipherment/#dataencipherment","text":"DataEncipherment","title":"DataEncipherment"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-decipher-only/","text":"certifikit / app.cash.certifikit / KeyUsage / DecipherOnly DecipherOnly \u00b6 DecipherOnly","title":"DecipherOnly - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-decipher-only/#decipheronly","text":"DecipherOnly","title":"DecipherOnly"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-digital-signature/","text":"certifikit / app.cash.certifikit / KeyUsage / DigitalSignature DigitalSignature \u00b6 DigitalSignature","title":"DigitalSignature - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-digital-signature/#digitalsignature","text":"DigitalSignature","title":"DigitalSignature"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-encipher-only/","text":"certifikit / app.cash.certifikit / KeyUsage / EncipherOnly EncipherOnly \u00b6 EncipherOnly","title":"EncipherOnly - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-encipher-only/#encipheronly","text":"EncipherOnly","title":"EncipherOnly"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-key-agreement/","text":"certifikit / app.cash.certifikit / KeyUsage / KeyAgreement KeyAgreement \u00b6 KeyAgreement","title":"KeyAgreement - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-key-agreement/#keyagreement","text":"KeyAgreement","title":"KeyAgreement"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-key-cert-sign/","text":"certifikit / app.cash.certifikit / KeyUsage / KeyCertSign KeyCertSign \u00b6 KeyCertSign","title":"KeyCertSign - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-key-cert-sign/#keycertsign","text":"KeyCertSign","title":"KeyCertSign"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-key-encipherment/","text":"certifikit / app.cash.certifikit / KeyUsage / KeyEncipherment KeyEncipherment \u00b6 KeyEncipherment","title":"KeyEncipherment - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-key-encipherment/#keyencipherment","text":"KeyEncipherment","title":"KeyEncipherment"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-non-repudiation/","text":"certifikit / app.cash.certifikit / KeyUsage / NonRepudiation NonRepudiation \u00b6 NonRepudiation","title":"NonRepudiation - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/-non-repudiation/#nonrepudiation","text":"NonRepudiation","title":"NonRepudiation"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/bit/","text":"certifikit / app.cash.certifikit / KeyUsage / bit bit \u00b6 val bit: Int","title":"bit - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-key-usage/bit/#bit","text":"val bit: Int","title":"bit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers ObjectIdentifiers \u00b6 object ObjectIdentifiers ASN.1 object identifiers used internally by this implementation. Properties \u00b6 Name Summary authorityInfoAccess const val authorityInfoAccess: String authorityKeyIdentifier const val authorityKeyIdentifier: String basicConstraints const val basicConstraints: String caIssuers const val caIssuers: String certificatePolicies const val certificatePolicies: String commonName const val commonName: String cRLDistributionPoints const val cRLDistributionPoints: String ecPublicKey const val ecPublicKey: String extKeyUsage const val extKeyUsage: String keyUsage const val keyUsage: String ocsp const val ocsp: String organizationalUnitName const val organizationalUnitName: String rsaEncryption const val rsaEncryption: String sha256withEcdsa const val sha256withEcdsa: String sha256WithRSAEncryption const val sha256WithRSAEncryption: String subjectAlternativeName const val subjectAlternativeName: String subjectKeyIdentifier const val subjectKeyIdentifier: String","title":"ObjectIdentifiers - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/#objectidentifiers","text":"object ObjectIdentifiers ASN.1 object identifiers used internally by this implementation.","title":"ObjectIdentifiers"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/#properties","text":"Name Summary authorityInfoAccess const val authorityInfoAccess: String authorityKeyIdentifier const val authorityKeyIdentifier: String basicConstraints const val basicConstraints: String caIssuers const val caIssuers: String certificatePolicies const val certificatePolicies: String commonName const val commonName: String cRLDistributionPoints const val cRLDistributionPoints: String ecPublicKey const val ecPublicKey: String extKeyUsage const val extKeyUsage: String keyUsage const val keyUsage: String ocsp const val ocsp: String organizationalUnitName const val organizationalUnitName: String rsaEncryption const val rsaEncryption: String sha256withEcdsa const val sha256withEcdsa: String sha256WithRSAEncryption const val sha256WithRSAEncryption: String subjectAlternativeName const val subjectAlternativeName: String subjectKeyIdentifier const val subjectKeyIdentifier: String","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/authority-info-access/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / authorityInfoAccess authorityInfoAccess \u00b6 const val authorityInfoAccess: String","title":"authorityInfoAccess - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/authority-info-access/#authorityinfoaccess","text":"const val authorityInfoAccess: String","title":"authorityInfoAccess"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/authority-key-identifier/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / authorityKeyIdentifier authorityKeyIdentifier \u00b6 const val authorityKeyIdentifier: String","title":"authorityKeyIdentifier - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/authority-key-identifier/#authoritykeyidentifier","text":"const val authorityKeyIdentifier: String","title":"authorityKeyIdentifier"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/basic-constraints/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / basicConstraints basicConstraints \u00b6 const val basicConstraints: String","title":"basicConstraints - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/basic-constraints/#basicconstraints","text":"const val basicConstraints: String","title":"basicConstraints"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/c-r-l-distribution-points/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / cRLDistributionPoints cRLDistributionPoints \u00b6 const val cRLDistributionPoints: String","title":"cRLDistributionPoints - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/c-r-l-distribution-points/#crldistributionpoints","text":"const val cRLDistributionPoints: String","title":"cRLDistributionPoints"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/ca-issuers/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / caIssuers caIssuers \u00b6 const val caIssuers: String","title":"caIssuers - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/ca-issuers/#caissuers","text":"const val caIssuers: String","title":"caIssuers"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/certificate-policies/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / certificatePolicies certificatePolicies \u00b6 const val certificatePolicies: String","title":"certificatePolicies - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/certificate-policies/#certificatepolicies","text":"const val certificatePolicies: String","title":"certificatePolicies"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/common-name/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / commonName commonName \u00b6 const val commonName: String","title":"commonName - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/common-name/#commonname","text":"const val commonName: String","title":"commonName"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/ec-public-key/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / ecPublicKey ecPublicKey \u00b6 const val ecPublicKey: String","title":"ecPublicKey - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/ec-public-key/#ecpublickey","text":"const val ecPublicKey: String","title":"ecPublicKey"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/ext-key-usage/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / extKeyUsage extKeyUsage \u00b6 const val extKeyUsage: String","title":"extKeyUsage - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/ext-key-usage/#extkeyusage","text":"const val extKeyUsage: String","title":"extKeyUsage"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/key-usage/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / keyUsage keyUsage \u00b6 const val keyUsage: String","title":"keyUsage - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/key-usage/#keyusage","text":"const val keyUsage: String","title":"keyUsage"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/ocsp/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / ocsp ocsp \u00b6 const val ocsp: String","title":"ocsp - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/ocsp/#ocsp","text":"const val ocsp: String","title":"ocsp"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/organizational-unit-name/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / organizationalUnitName organizationalUnitName \u00b6 const val organizationalUnitName: String","title":"organizationalUnitName - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/organizational-unit-name/#organizationalunitname","text":"const val organizationalUnitName: String","title":"organizationalUnitName"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/rsa-encryption/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / rsaEncryption rsaEncryption \u00b6 const val rsaEncryption: String","title":"rsaEncryption - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/rsa-encryption/#rsaencryption","text":"const val rsaEncryption: String","title":"rsaEncryption"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/sha256-with-r-s-a-encryption/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / sha256WithRSAEncryption sha256WithRSAEncryption \u00b6 const val sha256WithRSAEncryption: String","title":"sha256WithRSAEncryption - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/sha256-with-r-s-a-encryption/#sha256withrsaencryption","text":"const val sha256WithRSAEncryption: String","title":"sha256WithRSAEncryption"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/sha256with-ecdsa/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / sha256withEcdsa sha256withEcdsa \u00b6 const val sha256withEcdsa: String","title":"sha256withEcdsa - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/sha256with-ecdsa/#sha256withecdsa","text":"const val sha256withEcdsa: String","title":"sha256withEcdsa"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/subject-alternative-name/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / subjectAlternativeName subjectAlternativeName \u00b6 const val subjectAlternativeName: String","title":"subjectAlternativeName - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/subject-alternative-name/#subjectalternativename","text":"const val subjectAlternativeName: String","title":"subjectAlternativeName"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/subject-key-identifier/","text":"certifikit / app.cash.certifikit / ObjectIdentifiers / subjectKeyIdentifier subjectKeyIdentifier \u00b6 const val subjectKeyIdentifier: String","title":"subjectKeyIdentifier - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-object-identifiers/subject-key-identifier/#subjectkeyidentifier","text":"const val subjectKeyIdentifier: String","title":"subjectKeyIdentifier"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/","text":"certifikit / app.cash.certifikit / PrivateKeyInfo PrivateKeyInfo \u00b6 data class PrivateKeyInfo A private key. Note that this class doesn\u2019t support attributes or an embedded public key. Constructors \u00b6 Name Summary <init> A private key. Note that this class doesn\u2019t support attributes or an embedded public key. PrivateKeyInfo(version: Long , algorithmIdentifier: AlgorithmIdentifier , privateKey: ByteString ) Properties \u00b6 Name Summary algorithmIdentifier val algorithmIdentifier: AlgorithmIdentifier privateKey val privateKey: ByteString version val version: Long Functions \u00b6 Name Summary hashCode fun hashCode(): Int","title":"PrivateKeyInfo - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/#privatekeyinfo","text":"data class PrivateKeyInfo A private key. Note that this class doesn\u2019t support attributes or an embedded public key.","title":"PrivateKeyInfo"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/#constructors","text":"Name Summary <init> A private key. Note that this class doesn\u2019t support attributes or an embedded public key. PrivateKeyInfo(version: Long , algorithmIdentifier: AlgorithmIdentifier , privateKey: ByteString )","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/#properties","text":"Name Summary algorithmIdentifier val algorithmIdentifier: AlgorithmIdentifier privateKey val privateKey: ByteString version val version: Long","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/#functions","text":"Name Summary hashCode fun hashCode(): Int","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/-init-/","text":"certifikit / app.cash.certifikit / PrivateKeyInfo / <init> <init> \u00b6 PrivateKeyInfo(version: Long , algorithmIdentifier: AlgorithmIdentifier , privateKey: ByteString ) A private key. Note that this class doesn\u2019t support attributes or an embedded public key.","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/-init-/#init","text":"PrivateKeyInfo(version: Long , algorithmIdentifier: AlgorithmIdentifier , privateKey: ByteString ) A private key. Note that this class doesn\u2019t support attributes or an embedded public key.","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/algorithm-identifier/","text":"certifikit / app.cash.certifikit / PrivateKeyInfo / algorithmIdentifier algorithmIdentifier \u00b6 val algorithmIdentifier: AlgorithmIdentifier","title":"algorithmIdentifier - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/algorithm-identifier/#algorithmidentifier","text":"val algorithmIdentifier: AlgorithmIdentifier","title":"algorithmIdentifier"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/hash-code/","text":"certifikit / app.cash.certifikit / PrivateKeyInfo / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/private-key/","text":"certifikit / app.cash.certifikit / PrivateKeyInfo / privateKey privateKey \u00b6 val privateKey: ByteString","title":"privateKey - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/private-key/#privatekey","text":"val privateKey: ByteString","title":"privateKey"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/version/","text":"certifikit / app.cash.certifikit / PrivateKeyInfo / version version \u00b6 val version: Long","title":"version - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-private-key-info/version/#version","text":"val version: Long","title":"version"},{"location":"0.x/certifikit/app.cash.certifikit/-subject-public-key-info/","text":"certifikit / app.cash.certifikit / SubjectPublicKeyInfo SubjectPublicKeyInfo \u00b6 data class SubjectPublicKeyInfo Constructors \u00b6 Name Summary <init> SubjectPublicKeyInfo(algorithm: AlgorithmIdentifier , subjectPublicKey: BitString ) Properties \u00b6 Name Summary algorithm val algorithm: AlgorithmIdentifier subjectPublicKey val subjectPublicKey: BitString","title":"SubjectPublicKeyInfo - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-subject-public-key-info/#subjectpublickeyinfo","text":"data class SubjectPublicKeyInfo","title":"SubjectPublicKeyInfo"},{"location":"0.x/certifikit/app.cash.certifikit/-subject-public-key-info/#constructors","text":"Name Summary <init> SubjectPublicKeyInfo(algorithm: AlgorithmIdentifier , subjectPublicKey: BitString )","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-subject-public-key-info/#properties","text":"Name Summary algorithm val algorithm: AlgorithmIdentifier subjectPublicKey val subjectPublicKey: BitString","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-subject-public-key-info/-init-/","text":"certifikit / app.cash.certifikit / SubjectPublicKeyInfo / <init> <init> \u00b6 SubjectPublicKeyInfo(algorithm: AlgorithmIdentifier , subjectPublicKey: BitString )","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-subject-public-key-info/-init-/#init","text":"SubjectPublicKeyInfo(algorithm: AlgorithmIdentifier , subjectPublicKey: BitString )","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-subject-public-key-info/algorithm/","text":"certifikit / app.cash.certifikit / SubjectPublicKeyInfo / algorithm algorithm \u00b6 val algorithm: AlgorithmIdentifier","title":"algorithm - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-subject-public-key-info/algorithm/#algorithm","text":"val algorithm: AlgorithmIdentifier","title":"algorithm"},{"location":"0.x/certifikit/app.cash.certifikit/-subject-public-key-info/subject-public-key/","text":"certifikit / app.cash.certifikit / SubjectPublicKeyInfo / subjectPublicKey subjectPublicKey \u00b6 val subjectPublicKey: BitString","title":"subjectPublicKey - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-subject-public-key-info/subject-public-key/#subjectpublickey","text":"val subjectPublicKey: BitString","title":"subjectPublicKey"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/","text":"certifikit / app.cash.certifikit / TbsCertificate TbsCertificate \u00b6 data class TbsCertificate Constructors \u00b6 Name Summary <init> TbsCertificate(version: Long , serialNumber: BigInteger , signature: AlgorithmIdentifier , issuer: List < List < AttributeTypeAndValue >>, validity: Validity , subject: List < List < AttributeTypeAndValue >>, subjectPublicKeyInfo: SubjectPublicKeyInfo , issuerUniqueID: BitString ?, subjectUniqueID: BitString ?, extensions: List < Extension >) Properties \u00b6 Name Summary extensions val extensions: List < Extension > issuer val issuer: List < List < AttributeTypeAndValue >> issuerUniqueID val issuerUniqueID: BitString ? serialNumber val serialNumber: BigInteger signature val signature: AlgorithmIdentifier signatureAlgorithmName Returns the standard name of this certificate\u2019s signature algorithm as specified by Signature.getInstance . Typical values are like \u201cSHA256WithRSA\u201d. val signatureAlgorithmName: String subject val subject: List < List < AttributeTypeAndValue >> subjectPublicKeyInfo val subjectPublicKeyInfo: SubjectPublicKeyInfo subjectUniqueID val subjectUniqueID: BitString ? validity val validity: Validity version This is a integer enum. Use 0L for v1, 1L for v2, and 2L for v3. val version: Long Functions \u00b6 Name Summary hashCode fun hashCode(): Int","title":"TbsCertificate - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/#tbscertificate","text":"data class TbsCertificate","title":"TbsCertificate"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/#constructors","text":"Name Summary <init> TbsCertificate(version: Long , serialNumber: BigInteger , signature: AlgorithmIdentifier , issuer: List < List < AttributeTypeAndValue >>, validity: Validity , subject: List < List < AttributeTypeAndValue >>, subjectPublicKeyInfo: SubjectPublicKeyInfo , issuerUniqueID: BitString ?, subjectUniqueID: BitString ?, extensions: List < Extension >)","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/#properties","text":"Name Summary extensions val extensions: List < Extension > issuer val issuer: List < List < AttributeTypeAndValue >> issuerUniqueID val issuerUniqueID: BitString ? serialNumber val serialNumber: BigInteger signature val signature: AlgorithmIdentifier signatureAlgorithmName Returns the standard name of this certificate\u2019s signature algorithm as specified by Signature.getInstance . Typical values are like \u201cSHA256WithRSA\u201d. val signatureAlgorithmName: String subject val subject: List < List < AttributeTypeAndValue >> subjectPublicKeyInfo val subjectPublicKeyInfo: SubjectPublicKeyInfo subjectUniqueID val subjectUniqueID: BitString ? validity val validity: Validity version This is a integer enum. Use 0L for v1, 1L for v2, and 2L for v3. val version: Long","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/#functions","text":"Name Summary hashCode fun hashCode(): Int","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/-init-/","text":"certifikit / app.cash.certifikit / TbsCertificate / <init> <init> \u00b6 TbsCertificate(version: Long , serialNumber: BigInteger , signature: AlgorithmIdentifier , issuer: List < List < AttributeTypeAndValue >>, validity: Validity , subject: List < List < AttributeTypeAndValue >>, subjectPublicKeyInfo: SubjectPublicKeyInfo , issuerUniqueID: BitString ?, subjectUniqueID: BitString ?, extensions: List < Extension >)","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/-init-/#init","text":"TbsCertificate(version: Long , serialNumber: BigInteger , signature: AlgorithmIdentifier , issuer: List < List < AttributeTypeAndValue >>, validity: Validity , subject: List < List < AttributeTypeAndValue >>, subjectPublicKeyInfo: SubjectPublicKeyInfo , issuerUniqueID: BitString ?, subjectUniqueID: BitString ?, extensions: List < Extension >)","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/extensions/","text":"certifikit / app.cash.certifikit / TbsCertificate / extensions extensions \u00b6 val extensions: List < Extension >","title":"extensions - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/extensions/#extensions","text":"val extensions: List < Extension >","title":"extensions"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/hash-code/","text":"certifikit / app.cash.certifikit / TbsCertificate / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/issuer-unique-i-d/","text":"certifikit / app.cash.certifikit / TbsCertificate / issuerUniqueID issuerUniqueID \u00b6 val issuerUniqueID: BitString ?","title":"issuerUniqueID - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/issuer-unique-i-d/#issueruniqueid","text":"val issuerUniqueID: BitString ?","title":"issuerUniqueID"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/issuer/","text":"certifikit / app.cash.certifikit / TbsCertificate / issuer issuer \u00b6 val issuer: List < List < AttributeTypeAndValue >>","title":"issuer - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/issuer/#issuer","text":"val issuer: List < List < AttributeTypeAndValue >>","title":"issuer"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/serial-number/","text":"certifikit / app.cash.certifikit / TbsCertificate / serialNumber serialNumber \u00b6 val serialNumber: BigInteger","title":"serialNumber - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/serial-number/#serialnumber","text":"val serialNumber: BigInteger","title":"serialNumber"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/signature-algorithm-name/","text":"certifikit / app.cash.certifikit / TbsCertificate / signatureAlgorithmName signatureAlgorithmName \u00b6 val signatureAlgorithmName: String Returns the standard name of this certificate\u2019s signature algorithm as specified by Signature.getInstance . Typical values are like \u201cSHA256WithRSA\u201d.","title":"signatureAlgorithmName - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/signature-algorithm-name/#signaturealgorithmname","text":"val signatureAlgorithmName: String Returns the standard name of this certificate\u2019s signature algorithm as specified by Signature.getInstance . Typical values are like \u201cSHA256WithRSA\u201d.","title":"signatureAlgorithmName"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/signature/","text":"certifikit / app.cash.certifikit / TbsCertificate / signature signature \u00b6 val signature: AlgorithmIdentifier","title":"signature - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/signature/#signature","text":"val signature: AlgorithmIdentifier","title":"signature"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/subject-public-key-info/","text":"certifikit / app.cash.certifikit / TbsCertificate / subjectPublicKeyInfo subjectPublicKeyInfo \u00b6 val subjectPublicKeyInfo: SubjectPublicKeyInfo","title":"subjectPublicKeyInfo - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/subject-public-key-info/#subjectpublickeyinfo","text":"val subjectPublicKeyInfo: SubjectPublicKeyInfo","title":"subjectPublicKeyInfo"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/subject-unique-i-d/","text":"certifikit / app.cash.certifikit / TbsCertificate / subjectUniqueID subjectUniqueID \u00b6 val subjectUniqueID: BitString ?","title":"subjectUniqueID - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/subject-unique-i-d/#subjectuniqueid","text":"val subjectUniqueID: BitString ?","title":"subjectUniqueID"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/subject/","text":"certifikit / app.cash.certifikit / TbsCertificate / subject subject \u00b6 val subject: List < List < AttributeTypeAndValue >>","title":"subject - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/subject/#subject","text":"val subject: List < List < AttributeTypeAndValue >>","title":"subject"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/validity/","text":"certifikit / app.cash.certifikit / TbsCertificate / validity validity \u00b6 val validity: Validity","title":"validity - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/validity/#validity","text":"val validity: Validity","title":"validity"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/version/","text":"certifikit / app.cash.certifikit / TbsCertificate / version version \u00b6 val version: Long This is a integer enum. Use 0L for v1, 1L for v2, and 2L for v3.","title":"version - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-tbs-certificate/version/#version","text":"val version: Long This is a integer enum. Use 0L for v1, 1L for v2, and 2L for v3.","title":"version"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/","text":"certifikit / app.cash.certifikit / Validity Validity \u00b6 data class Validity Constructors \u00b6 Name Summary <init> Validity(notBefore: Long , notAfter: Long ) Properties \u00b6 Name Summary notAfter val notAfter: Long notBefore val notBefore: Long periodLeft Returns the remaining Period, or null if the certificate is not within the valid period. val periodLeft: Period ? Functions \u00b6 Name Summary hashCode fun hashCode(): Int","title":"Validity - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/#validity","text":"data class Validity","title":"Validity"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/#constructors","text":"Name Summary <init> Validity(notBefore: Long , notAfter: Long )","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/#properties","text":"Name Summary notAfter val notAfter: Long notBefore val notBefore: Long periodLeft Returns the remaining Period, or null if the certificate is not within the valid period. val periodLeft: Period ?","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/#functions","text":"Name Summary hashCode fun hashCode(): Int","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/-init-/","text":"certifikit / app.cash.certifikit / Validity / <init> <init> \u00b6 Validity(notBefore: Long , notAfter: Long )","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit/-validity/-init-/#init","text":"Validity(notBefore: Long , notAfter: Long )","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/hash-code/","text":"certifikit / app.cash.certifikit / Validity / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/not-after/","text":"certifikit / app.cash.certifikit / Validity / notAfter notAfter \u00b6 val notAfter: Long","title":"notAfter - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/not-after/#notafter","text":"val notAfter: Long","title":"notAfter"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/not-before/","text":"certifikit / app.cash.certifikit / Validity / notBefore notBefore \u00b6 val notBefore: Long","title":"notBefore - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/not-before/#notbefore","text":"val notBefore: Long","title":"notBefore"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/period-left/","text":"certifikit / app.cash.certifikit / Validity / periodLeft periodLeft \u00b6 val periodLeft: Period ? Returns the remaining Period, or null if the certificate is not within the valid period.","title":"periodLeft - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit/-validity/period-left/#periodleft","text":"val periodLeft: Period ? Returns the remaining Period, or null if the certificate is not within the valid period.","title":"periodLeft"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/","text":"certifikit / app.cash.certifikit.attestation Package app.cash.certifikit.attestation \u00b6 Types \u00b6 Name Summary AttestationAdapters object AttestationAdapters AuthorizationList AuthorizationList ::= SEQUENCE { purpose [1] EXPLICIT SET OF INTEGER OPTIONAL, algorithm [2] EXPLICIT INTEGER OPTIONAL, keySize [3] EXPLICIT INTEGER OPTIONAL. digest [5] EXPLICIT SET OF INTEGER OPTIONAL, padding [6] EXPLICIT SET OF INTEGER OPTIONAL, ecCurve [10] EXPLICIT INTEGER OPTIONAL, rsaPublicExponent [200] EXPLICIT INTEGER OPTIONAL, rollbackResistance [303] EXPLICIT NULL OPTIONAL, activeDateTime [400] EXPLICIT INTEGER OPTIONAL originationExpireDateTime [401] EXPLICIT INTEGER OPTIONAL usageExpireDateTime [402] EXPLICIT INTEGER OPTIONAL noAuthRequired [503] EXPLICIT NULL OPTIONAL, userAuthType [504] EXPLICIT INTEGER OPTIONAL, authTimeout [505] EXPLICIT INTEGER OPTIONAL, allowWhileOnBody [506] EXPLICIT NULL OPTIONAL, trustedUserPresenceRequired [507] EXPLICIT NULL OPTIONAL, trustedConfirmationRequired [508] EXPLICIT NULL OPTIONAL, unlockedDeviceRequired [509] EXPLICIT NULL OPTIONAL, allApplications [600] EXPLICIT NULL OPTIONAL, applicationId [601] EXPLICIT OCTET_STRING OPTIONAL, creationDateTime [701] EXPLICIT INTEGER OPTIONAL, origin [702] EXPLICIT INTEGER OPTIONAL, rollbackResistant [703] EXPLICIT NULL OPTIONAL, rootOfTrust [704] EXPLICIT RootOfTrust OPTIONAL, osVersion [705] EXPLICIT INTEGER OPTIONAL, osPatchLevel [706] EXPLICIT INTEGER OPTIONAL, attestationApplicationId [709] EXPLICIT OCTET_STRING OPTIONAL, attestationIdBrand [710] EXPLICIT OCTET_STRING OPTIONAL, attestationIdDevice [711] EXPLICIT OCTET_STRING OPTIONAL, attestationIdProduct [712] EXPLICIT OCTET_STRING OPTIONAL, attestationIdSerial [713] EXPLICIT OCTET_STRING OPTIONAL, attestationIdImei [714] EXPLICIT OCTET_STRING OPTIONAL, attestationIdMeid [715] EXPLICIT OCTET_STRING OPTIONAL, attestationIdManufacturer [716] EXPLICIT OCTET_STRING OPTIONAL, attestationIdModel [717] EXPLICIT OCTET_STRING OPTIONAL, vendorPatchLevel [718] EXPLICIT INTEGER OPTIONAL, bootPatchLevel [719] EXPLICIT INTEGER OPTIONAL, } <br>``` <br>`data class AuthorizationList` | | [KeyDescription](-key-description/index.md) | KeyDescription ::= SEQUENCE { attestationVersion INTEGER, attestationSecurityLevel SecurityLevel, keymasterVersion INTEGER, keymasterSecurityLevel SecurityLevel, attestationChallenge OCTET_STRING, uniqueId OCTET_STRING, softwareEnforced AuthorizationList, teeEnforced AuthorizationList, } SecurityLevel ::= ENUMERATED { Software (0), TrustedEnvironment (1), StrongBox (2), } `` <br> data class KeyDescription` | | RootOfTrust | ``` VerifiedBootState ::= ENUMERATED { Verified (0), SelfSigned (1), Unverified (2), Failed (3), } RootOfTrust ::= SEQUENCE { verifiedBootKey OCTET_STRING, deviceLocked BOOLEAN, verifiedBootState VerifiedBootState, verifiedBootHash OCTET_STRING, } `` <br> data class RootOfTrust` |","title":"Package app.cash.certifikit.attestation - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/#package-appcashcertifikitattestation","text":"","title":"Package app.cash.certifikit.attestation"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/#types","text":"Name Summary AttestationAdapters object AttestationAdapters AuthorizationList AuthorizationList ::= SEQUENCE { purpose [1] EXPLICIT SET OF INTEGER OPTIONAL, algorithm [2] EXPLICIT INTEGER OPTIONAL, keySize [3] EXPLICIT INTEGER OPTIONAL. digest [5] EXPLICIT SET OF INTEGER OPTIONAL, padding [6] EXPLICIT SET OF INTEGER OPTIONAL, ecCurve [10] EXPLICIT INTEGER OPTIONAL, rsaPublicExponent [200] EXPLICIT INTEGER OPTIONAL, rollbackResistance [303] EXPLICIT NULL OPTIONAL, activeDateTime [400] EXPLICIT INTEGER OPTIONAL originationExpireDateTime [401] EXPLICIT INTEGER OPTIONAL usageExpireDateTime [402] EXPLICIT INTEGER OPTIONAL noAuthRequired [503] EXPLICIT NULL OPTIONAL, userAuthType [504] EXPLICIT INTEGER OPTIONAL, authTimeout [505] EXPLICIT INTEGER OPTIONAL, allowWhileOnBody [506] EXPLICIT NULL OPTIONAL, trustedUserPresenceRequired [507] EXPLICIT NULL OPTIONAL, trustedConfirmationRequired [508] EXPLICIT NULL OPTIONAL, unlockedDeviceRequired [509] EXPLICIT NULL OPTIONAL, allApplications [600] EXPLICIT NULL OPTIONAL, applicationId [601] EXPLICIT OCTET_STRING OPTIONAL, creationDateTime [701] EXPLICIT INTEGER OPTIONAL, origin [702] EXPLICIT INTEGER OPTIONAL, rollbackResistant [703] EXPLICIT NULL OPTIONAL, rootOfTrust [704] EXPLICIT RootOfTrust OPTIONAL, osVersion [705] EXPLICIT INTEGER OPTIONAL, osPatchLevel [706] EXPLICIT INTEGER OPTIONAL, attestationApplicationId [709] EXPLICIT OCTET_STRING OPTIONAL, attestationIdBrand [710] EXPLICIT OCTET_STRING OPTIONAL, attestationIdDevice [711] EXPLICIT OCTET_STRING OPTIONAL, attestationIdProduct [712] EXPLICIT OCTET_STRING OPTIONAL, attestationIdSerial [713] EXPLICIT OCTET_STRING OPTIONAL, attestationIdImei [714] EXPLICIT OCTET_STRING OPTIONAL, attestationIdMeid [715] EXPLICIT OCTET_STRING OPTIONAL, attestationIdManufacturer [716] EXPLICIT OCTET_STRING OPTIONAL, attestationIdModel [717] EXPLICIT OCTET_STRING OPTIONAL, vendorPatchLevel [718] EXPLICIT INTEGER OPTIONAL, bootPatchLevel [719] EXPLICIT INTEGER OPTIONAL, } <br>``` <br>`data class AuthorizationList` | | [KeyDescription](-key-description/index.md) | KeyDescription ::= SEQUENCE { attestationVersion INTEGER, attestationSecurityLevel SecurityLevel, keymasterVersion INTEGER, keymasterSecurityLevel SecurityLevel, attestationChallenge OCTET_STRING, uniqueId OCTET_STRING, softwareEnforced AuthorizationList, teeEnforced AuthorizationList, } SecurityLevel ::= ENUMERATED { Software (0), TrustedEnvironment (1), StrongBox (2), } `` <br> data class KeyDescription` | | RootOfTrust | ``` VerifiedBootState ::= ENUMERATED { Verified (0), SelfSigned (1), Unverified (2), Failed (3), } RootOfTrust ::= SEQUENCE { verifiedBootKey OCTET_STRING, deviceLocked BOOLEAN, verifiedBootState VerifiedBootState, verifiedBootHash OCTET_STRING, } `` <br> data class RootOfTrust` |","title":"Types"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-attestation-adapters/","text":"certifikit / app.cash.certifikit.attestation / AttestationAdapters AttestationAdapters \u00b6 object AttestationAdapters Properties \u00b6 Name Summary KEY_DESCRIPTION_OID const val KEY_DESCRIPTION_OID: String","title":"AttestationAdapters - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-attestation-adapters/#attestationadapters","text":"object AttestationAdapters","title":"AttestationAdapters"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-attestation-adapters/#properties","text":"Name Summary KEY_DESCRIPTION_OID const val KEY_DESCRIPTION_OID: String","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-attestation-adapters/-k-e-y_-d-e-s-c-r-i-p-t-i-o-n_-o-i-d/","text":"certifikit / app.cash.certifikit.attestation / AttestationAdapters / KEY_DESCRIPTION_OID KEY_DESCRIPTION_OID \u00b6 const val KEY_DESCRIPTION_OID: String","title":"KEY_DESCRIPTION_OID - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-attestation-adapters/-k-e-y_-d-e-s-c-r-i-p-t-i-o-n_-o-i-d/#key_description_oid","text":"const val KEY_DESCRIPTION_OID: String","title":"KEY_DESCRIPTION_OID"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList AuthorizationList \u00b6 data class AuthorizationList AuthorizationList ::= SEQUENCE { purpose [1] EXPLICIT SET OF INTEGER OPTIONAL, algorithm [2] EXPLICIT INTEGER OPTIONAL, keySize [3] EXPLICIT INTEGER OPTIONAL. digest [5] EXPLICIT SET OF INTEGER OPTIONAL, padding [6] EXPLICIT SET OF INTEGER OPTIONAL, ecCurve [10] EXPLICIT INTEGER OPTIONAL, rsaPublicExponent [200] EXPLICIT INTEGER OPTIONAL, rollbackResistance [303] EXPLICIT NULL OPTIONAL, activeDateTime [400] EXPLICIT INTEGER OPTIONAL originationExpireDateTime [401] EXPLICIT INTEGER OPTIONAL usageExpireDateTime [402] EXPLICIT INTEGER OPTIONAL noAuthRequired [503] EXPLICIT NULL OPTIONAL, userAuthType [504] EXPLICIT INTEGER OPTIONAL, authTimeout [505] EXPLICIT INTEGER OPTIONAL, allowWhileOnBody [506] EXPLICIT NULL OPTIONAL, trustedUserPresenceRequired [507] EXPLICIT NULL OPTIONAL, trustedConfirmationRequired [508] EXPLICIT NULL OPTIONAL, unlockedDeviceRequired [509] EXPLICIT NULL OPTIONAL, allApplications [600] EXPLICIT NULL OPTIONAL, applicationId [601] EXPLICIT OCTET_STRING OPTIONAL, creationDateTime [701] EXPLICIT INTEGER OPTIONAL, origin [702] EXPLICIT INTEGER OPTIONAL, rollbackResistant [703] EXPLICIT NULL OPTIONAL, rootOfTrust [704] EXPLICIT RootOfTrust OPTIONAL, osVersion [705] EXPLICIT INTEGER OPTIONAL, osPatchLevel [706] EXPLICIT INTEGER OPTIONAL, attestationApplicationId [709] EXPLICIT OCTET_STRING OPTIONAL, attestationIdBrand [710] EXPLICIT OCTET_STRING OPTIONAL, attestationIdDevice [711] EXPLICIT OCTET_STRING OPTIONAL, attestationIdProduct [712] EXPLICIT OCTET_STRING OPTIONAL, attestationIdSerial [713] EXPLICIT OCTET_STRING OPTIONAL, attestationIdImei [714] EXPLICIT OCTET_STRING OPTIONAL, attestationIdMeid [715] EXPLICIT OCTET_STRING OPTIONAL, attestationIdManufacturer [716] EXPLICIT OCTET_STRING OPTIONAL, attestationIdModel [717] EXPLICIT OCTET_STRING OPTIONAL, vendorPatchLevel [718] EXPLICIT INTEGER OPTIONAL, bootPatchLevel [719] EXPLICIT INTEGER OPTIONAL, } Constructors \u00b6 Name Summary <init> AuthorizationList ::= SEQUENCE { purpose [1] EXPLICIT SET OF INTEGER OPTIONAL, algorithm [2] EXPLICIT INTEGER OPTIONAL, keySize [3] EXPLICIT INTEGER OPTIONAL. digest [5] EXPLICIT SET OF INTEGER OPTIONAL, padding [6] EXPLICIT SET OF INTEGER OPTIONAL, ecCurve [10] EXPLICIT INTEGER OPTIONAL, rsaPublicExponent [200] EXPLICIT INTEGER OPTIONAL, rollbackResistance [303] EXPLICIT NULL OPTIONAL, activeDateTime [400] EXPLICIT INTEGER OPTIONAL originationExpireDateTime [401] EXPLICIT INTEGER OPTIONAL usageExpireDateTime [402] EXPLICIT INTEGER OPTIONAL noAuthRequired [503] EXPLICIT NULL OPTIONAL, userAuthType [504] EXPLICIT INTEGER OPTIONAL, authTimeout [505] EXPLICIT INTEGER OPTIONAL, allowWhileOnBody [506] EXPLICIT NULL OPTIONAL, trustedUserPresenceRequired [507] EXPLICIT NULL OPTIONAL, trustedConfirmationRequired [508] EXPLICIT NULL OPTIONAL, unlockedDeviceRequired [509] EXPLICIT NULL OPTIONAL, allApplications [600] EXPLICIT NULL OPTIONAL, applicationId [601] EXPLICIT OCTET_STRING OPTIONAL, creationDateTime [701] EXPLICIT INTEGER OPTIONAL, origin [702] EXPLICIT INTEGER OPTIONAL, rollbackResistant [703] EXPLICIT NULL OPTIONAL, rootOfTrust [704] EXPLICIT RootOfTrust OPTIONAL, osVersion [705] EXPLICIT INTEGER OPTIONAL, osPatchLevel [706] EXPLICIT INTEGER OPTIONAL, attestationApplicationId [709] EXPLICIT OCTET_STRING OPTIONAL, attestationIdBrand [710] EXPLICIT OCTET_STRING OPTIONAL, attestationIdDevice [711] EXPLICIT OCTET_STRING OPTIONAL, attestationIdProduct [712] EXPLICIT OCTET_STRING OPTIONAL, attestationIdSerial [713] EXPLICIT OCTET_STRING OPTIONAL, attestationIdImei [714] EXPLICIT OCTET_STRING OPTIONAL, attestationIdMeid [715] EXPLICIT OCTET_STRING OPTIONAL, attestationIdManufacturer [716] EXPLICIT OCTET_STRING OPTIONAL, attestationIdModel [717] EXPLICIT OCTET_STRING OPTIONAL, vendorPatchLevel [718] EXPLICIT INTEGER OPTIONAL, bootPatchLevel [719] EXPLICIT INTEGER OPTIONAL, } <br> AuthorizationList(purpose: List < Long >? = null, algorithm: Long ? = null, keySize: Long ? = null, digest: List < Long >? = null, padding: List < Long >? = null, ecCurve: Long ? = null, rsaPublicExponent: Long ? = null, rollbackResistance: Unit ? = null, activeDateTime: Long ? = null, originationExpireDateTime: Long ? = null, usageExpireDateTime: Long ? = null, noAuthRequired: Unit ? = null, userAuthType: Long ? = null, authTimeout: Long ? = null, allowWhileOnBody: Unit ? = null, trustedUserPresenceRequired: Unit ? = null, trustedConfirmationRequired: Unit ? = null, unlockedDeviceRequired: Unit ? = null, allApplications: Unit ? = null, applicationId: ByteString ? = null, creationDateTime: Long ? = null, origin: Long ? = null, rollbackResistant: Unit ? = null, rootOfTrust: RootOfTrust ? = null, osVersion: Long ? = null, osPatchLevel: Long ? = null, attestationApplicationId: ByteString ? = null, attestationIdBrand: ByteString ? = null, attestationIdDevice: ByteString ? = null, attestationIdProduct: ByteString ? = null, attestationIdSerial: ByteString ? = null, attestationIdImei: ByteString ? = null, attestationIdMeid: ByteString ? = null, attestationIdManufacturer: ByteString ? = null, attestationIdModel: ByteString ? = null, vendorPatchLevel: Long ? = null, bootPatchLevel: Long ? = null) | Properties \u00b6 Name Summary activeDateTime val activeDateTime: Long ? algorithm val algorithm: Long ? allApplications val allApplications: Unit ? allowWhileOnBody val allowWhileOnBody: Unit ? applicationId val applicationId: ByteString ? attestationApplicationId val attestationApplicationId: ByteString ? attestationIdBrand val attestationIdBrand: ByteString ? attestationIdDevice val attestationIdDevice: ByteString ? attestationIdImei val attestationIdImei: ByteString ? attestationIdManufacturer val attestationIdManufacturer: ByteString ? attestationIdMeid val attestationIdMeid: ByteString ? attestationIdModel val attestationIdModel: ByteString ? attestationIdProduct val attestationIdProduct: ByteString ? attestationIdSerial val attestationIdSerial: ByteString ? authTimeout val authTimeout: Long ? bootPatchLevel val bootPatchLevel: Long ? creationDateTime val creationDateTime: Long ? digest val digest: List < Long >? ecCurve val ecCurve: Long ? keySize val keySize: Long ? noAuthRequired val noAuthRequired: Unit ? origin val origin: Long ? originationExpireDateTime val originationExpireDateTime: Long ? osPatchLevel val osPatchLevel: Long ? osVersion val osVersion: Long ? padding val padding: List < Long >? purpose val purpose: List < Long >? rollbackResistance val rollbackResistance: Unit ? rollbackResistant val rollbackResistant: Unit ? rootOfTrust val rootOfTrust: RootOfTrust ? rsaPublicExponent val rsaPublicExponent: Long ? trustedConfirmationRequired val trustedConfirmationRequired: Unit ? trustedUserPresenceRequired val trustedUserPresenceRequired: Unit ? unlockedDeviceRequired val unlockedDeviceRequired: Unit ? usageExpireDateTime val usageExpireDateTime: Long ? userAuthType val userAuthType: Long ? vendorPatchLevel val vendorPatchLevel: Long ?","title":"AuthorizationList - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/#authorizationlist","text":"data class AuthorizationList AuthorizationList ::= SEQUENCE { purpose [1] EXPLICIT SET OF INTEGER OPTIONAL, algorithm [2] EXPLICIT INTEGER OPTIONAL, keySize [3] EXPLICIT INTEGER OPTIONAL. digest [5] EXPLICIT SET OF INTEGER OPTIONAL, padding [6] EXPLICIT SET OF INTEGER OPTIONAL, ecCurve [10] EXPLICIT INTEGER OPTIONAL, rsaPublicExponent [200] EXPLICIT INTEGER OPTIONAL, rollbackResistance [303] EXPLICIT NULL OPTIONAL, activeDateTime [400] EXPLICIT INTEGER OPTIONAL originationExpireDateTime [401] EXPLICIT INTEGER OPTIONAL usageExpireDateTime [402] EXPLICIT INTEGER OPTIONAL noAuthRequired [503] EXPLICIT NULL OPTIONAL, userAuthType [504] EXPLICIT INTEGER OPTIONAL, authTimeout [505] EXPLICIT INTEGER OPTIONAL, allowWhileOnBody [506] EXPLICIT NULL OPTIONAL, trustedUserPresenceRequired [507] EXPLICIT NULL OPTIONAL, trustedConfirmationRequired [508] EXPLICIT NULL OPTIONAL, unlockedDeviceRequired [509] EXPLICIT NULL OPTIONAL, allApplications [600] EXPLICIT NULL OPTIONAL, applicationId [601] EXPLICIT OCTET_STRING OPTIONAL, creationDateTime [701] EXPLICIT INTEGER OPTIONAL, origin [702] EXPLICIT INTEGER OPTIONAL, rollbackResistant [703] EXPLICIT NULL OPTIONAL, rootOfTrust [704] EXPLICIT RootOfTrust OPTIONAL, osVersion [705] EXPLICIT INTEGER OPTIONAL, osPatchLevel [706] EXPLICIT INTEGER OPTIONAL, attestationApplicationId [709] EXPLICIT OCTET_STRING OPTIONAL, attestationIdBrand [710] EXPLICIT OCTET_STRING OPTIONAL, attestationIdDevice [711] EXPLICIT OCTET_STRING OPTIONAL, attestationIdProduct [712] EXPLICIT OCTET_STRING OPTIONAL, attestationIdSerial [713] EXPLICIT OCTET_STRING OPTIONAL, attestationIdImei [714] EXPLICIT OCTET_STRING OPTIONAL, attestationIdMeid [715] EXPLICIT OCTET_STRING OPTIONAL, attestationIdManufacturer [716] EXPLICIT OCTET_STRING OPTIONAL, attestationIdModel [717] EXPLICIT OCTET_STRING OPTIONAL, vendorPatchLevel [718] EXPLICIT INTEGER OPTIONAL, bootPatchLevel [719] EXPLICIT INTEGER OPTIONAL, }","title":"AuthorizationList"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/#constructors","text":"Name Summary <init> AuthorizationList ::= SEQUENCE { purpose [1] EXPLICIT SET OF INTEGER OPTIONAL, algorithm [2] EXPLICIT INTEGER OPTIONAL, keySize [3] EXPLICIT INTEGER OPTIONAL. digest [5] EXPLICIT SET OF INTEGER OPTIONAL, padding [6] EXPLICIT SET OF INTEGER OPTIONAL, ecCurve [10] EXPLICIT INTEGER OPTIONAL, rsaPublicExponent [200] EXPLICIT INTEGER OPTIONAL, rollbackResistance [303] EXPLICIT NULL OPTIONAL, activeDateTime [400] EXPLICIT INTEGER OPTIONAL originationExpireDateTime [401] EXPLICIT INTEGER OPTIONAL usageExpireDateTime [402] EXPLICIT INTEGER OPTIONAL noAuthRequired [503] EXPLICIT NULL OPTIONAL, userAuthType [504] EXPLICIT INTEGER OPTIONAL, authTimeout [505] EXPLICIT INTEGER OPTIONAL, allowWhileOnBody [506] EXPLICIT NULL OPTIONAL, trustedUserPresenceRequired [507] EXPLICIT NULL OPTIONAL, trustedConfirmationRequired [508] EXPLICIT NULL OPTIONAL, unlockedDeviceRequired [509] EXPLICIT NULL OPTIONAL, allApplications [600] EXPLICIT NULL OPTIONAL, applicationId [601] EXPLICIT OCTET_STRING OPTIONAL, creationDateTime [701] EXPLICIT INTEGER OPTIONAL, origin [702] EXPLICIT INTEGER OPTIONAL, rollbackResistant [703] EXPLICIT NULL OPTIONAL, rootOfTrust [704] EXPLICIT RootOfTrust OPTIONAL, osVersion [705] EXPLICIT INTEGER OPTIONAL, osPatchLevel [706] EXPLICIT INTEGER OPTIONAL, attestationApplicationId [709] EXPLICIT OCTET_STRING OPTIONAL, attestationIdBrand [710] EXPLICIT OCTET_STRING OPTIONAL, attestationIdDevice [711] EXPLICIT OCTET_STRING OPTIONAL, attestationIdProduct [712] EXPLICIT OCTET_STRING OPTIONAL, attestationIdSerial [713] EXPLICIT OCTET_STRING OPTIONAL, attestationIdImei [714] EXPLICIT OCTET_STRING OPTIONAL, attestationIdMeid [715] EXPLICIT OCTET_STRING OPTIONAL, attestationIdManufacturer [716] EXPLICIT OCTET_STRING OPTIONAL, attestationIdModel [717] EXPLICIT OCTET_STRING OPTIONAL, vendorPatchLevel [718] EXPLICIT INTEGER OPTIONAL, bootPatchLevel [719] EXPLICIT INTEGER OPTIONAL, } <br> AuthorizationList(purpose: List < Long >? = null, algorithm: Long ? = null, keySize: Long ? = null, digest: List < Long >? = null, padding: List < Long >? = null, ecCurve: Long ? = null, rsaPublicExponent: Long ? = null, rollbackResistance: Unit ? = null, activeDateTime: Long ? = null, originationExpireDateTime: Long ? = null, usageExpireDateTime: Long ? = null, noAuthRequired: Unit ? = null, userAuthType: Long ? = null, authTimeout: Long ? = null, allowWhileOnBody: Unit ? = null, trustedUserPresenceRequired: Unit ? = null, trustedConfirmationRequired: Unit ? = null, unlockedDeviceRequired: Unit ? = null, allApplications: Unit ? = null, applicationId: ByteString ? = null, creationDateTime: Long ? = null, origin: Long ? = null, rollbackResistant: Unit ? = null, rootOfTrust: RootOfTrust ? = null, osVersion: Long ? = null, osPatchLevel: Long ? = null, attestationApplicationId: ByteString ? = null, attestationIdBrand: ByteString ? = null, attestationIdDevice: ByteString ? = null, attestationIdProduct: ByteString ? = null, attestationIdSerial: ByteString ? = null, attestationIdImei: ByteString ? = null, attestationIdMeid: ByteString ? = null, attestationIdManufacturer: ByteString ? = null, attestationIdModel: ByteString ? = null, vendorPatchLevel: Long ? = null, bootPatchLevel: Long ? = null) |","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/#properties","text":"Name Summary activeDateTime val activeDateTime: Long ? algorithm val algorithm: Long ? allApplications val allApplications: Unit ? allowWhileOnBody val allowWhileOnBody: Unit ? applicationId val applicationId: ByteString ? attestationApplicationId val attestationApplicationId: ByteString ? attestationIdBrand val attestationIdBrand: ByteString ? attestationIdDevice val attestationIdDevice: ByteString ? attestationIdImei val attestationIdImei: ByteString ? attestationIdManufacturer val attestationIdManufacturer: ByteString ? attestationIdMeid val attestationIdMeid: ByteString ? attestationIdModel val attestationIdModel: ByteString ? attestationIdProduct val attestationIdProduct: ByteString ? attestationIdSerial val attestationIdSerial: ByteString ? authTimeout val authTimeout: Long ? bootPatchLevel val bootPatchLevel: Long ? creationDateTime val creationDateTime: Long ? digest val digest: List < Long >? ecCurve val ecCurve: Long ? keySize val keySize: Long ? noAuthRequired val noAuthRequired: Unit ? origin val origin: Long ? originationExpireDateTime val originationExpireDateTime: Long ? osPatchLevel val osPatchLevel: Long ? osVersion val osVersion: Long ? padding val padding: List < Long >? purpose val purpose: List < Long >? rollbackResistance val rollbackResistance: Unit ? rollbackResistant val rollbackResistant: Unit ? rootOfTrust val rootOfTrust: RootOfTrust ? rsaPublicExponent val rsaPublicExponent: Long ? trustedConfirmationRequired val trustedConfirmationRequired: Unit ? trustedUserPresenceRequired val trustedUserPresenceRequired: Unit ? unlockedDeviceRequired val unlockedDeviceRequired: Unit ? usageExpireDateTime val usageExpireDateTime: Long ? userAuthType val userAuthType: Long ? vendorPatchLevel val vendorPatchLevel: Long ?","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/-init-/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / <init> <init> \u00b6 AuthorizationList(purpose: List < Long >? = null, algorithm: Long ? = null, keySize: Long ? = null, digest: List < Long >? = null, padding: List < Long >? = null, ecCurve: Long ? = null, rsaPublicExponent: Long ? = null, rollbackResistance: Unit ? = null, activeDateTime: Long ? = null, originationExpireDateTime: Long ? = null, usageExpireDateTime: Long ? = null, noAuthRequired: Unit ? = null, userAuthType: Long ? = null, authTimeout: Long ? = null, allowWhileOnBody: Unit ? = null, trustedUserPresenceRequired: Unit ? = null, trustedConfirmationRequired: Unit ? = null, unlockedDeviceRequired: Unit ? = null, allApplications: Unit ? = null, applicationId: ByteString ? = null, creationDateTime: Long ? = null, origin: Long ? = null, rollbackResistant: Unit ? = null, rootOfTrust: RootOfTrust ? = null, osVersion: Long ? = null, osPatchLevel: Long ? = null, attestationApplicationId: ByteString ? = null, attestationIdBrand: ByteString ? = null, attestationIdDevice: ByteString ? = null, attestationIdProduct: ByteString ? = null, attestationIdSerial: ByteString ? = null, attestationIdImei: ByteString ? = null, attestationIdMeid: ByteString ? = null, attestationIdManufacturer: ByteString ? = null, attestationIdModel: ByteString ? = null, vendorPatchLevel: Long ? = null, bootPatchLevel: Long ? = null) AuthorizationList ::= SEQUENCE { purpose [1] EXPLICIT SET OF INTEGER OPTIONAL, algorithm [2] EXPLICIT INTEGER OPTIONAL, keySize [3] EXPLICIT INTEGER OPTIONAL. digest [5] EXPLICIT SET OF INTEGER OPTIONAL, padding [6] EXPLICIT SET OF INTEGER OPTIONAL, ecCurve [10] EXPLICIT INTEGER OPTIONAL, rsaPublicExponent [200] EXPLICIT INTEGER OPTIONAL, rollbackResistance [303] EXPLICIT NULL OPTIONAL, activeDateTime [400] EXPLICIT INTEGER OPTIONAL originationExpireDateTime [401] EXPLICIT INTEGER OPTIONAL usageExpireDateTime [402] EXPLICIT INTEGER OPTIONAL noAuthRequired [503] EXPLICIT NULL OPTIONAL, userAuthType [504] EXPLICIT INTEGER OPTIONAL, authTimeout [505] EXPLICIT INTEGER OPTIONAL, allowWhileOnBody [506] EXPLICIT NULL OPTIONAL, trustedUserPresenceRequired [507] EXPLICIT NULL OPTIONAL, trustedConfirmationRequired [508] EXPLICIT NULL OPTIONAL, unlockedDeviceRequired [509] EXPLICIT NULL OPTIONAL, allApplications [600] EXPLICIT NULL OPTIONAL, applicationId [601] EXPLICIT OCTET_STRING OPTIONAL, creationDateTime [701] EXPLICIT INTEGER OPTIONAL, origin [702] EXPLICIT INTEGER OPTIONAL, rollbackResistant [703] EXPLICIT NULL OPTIONAL, rootOfTrust [704] EXPLICIT RootOfTrust OPTIONAL, osVersion [705] EXPLICIT INTEGER OPTIONAL, osPatchLevel [706] EXPLICIT INTEGER OPTIONAL, attestationApplicationId [709] EXPLICIT OCTET_STRING OPTIONAL, attestationIdBrand [710] EXPLICIT OCTET_STRING OPTIONAL, attestationIdDevice [711] EXPLICIT OCTET_STRING OPTIONAL, attestationIdProduct [712] EXPLICIT OCTET_STRING OPTIONAL, attestationIdSerial [713] EXPLICIT OCTET_STRING OPTIONAL, attestationIdImei [714] EXPLICIT OCTET_STRING OPTIONAL, attestationIdMeid [715] EXPLICIT OCTET_STRING OPTIONAL, attestationIdManufacturer [716] EXPLICIT OCTET_STRING OPTIONAL, attestationIdModel [717] EXPLICIT OCTET_STRING OPTIONAL, vendorPatchLevel [718] EXPLICIT INTEGER OPTIONAL, bootPatchLevel [719] EXPLICIT INTEGER OPTIONAL, }","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/-init-/#init","text":"AuthorizationList(purpose: List < Long >? = null, algorithm: Long ? = null, keySize: Long ? = null, digest: List < Long >? = null, padding: List < Long >? = null, ecCurve: Long ? = null, rsaPublicExponent: Long ? = null, rollbackResistance: Unit ? = null, activeDateTime: Long ? = null, originationExpireDateTime: Long ? = null, usageExpireDateTime: Long ? = null, noAuthRequired: Unit ? = null, userAuthType: Long ? = null, authTimeout: Long ? = null, allowWhileOnBody: Unit ? = null, trustedUserPresenceRequired: Unit ? = null, trustedConfirmationRequired: Unit ? = null, unlockedDeviceRequired: Unit ? = null, allApplications: Unit ? = null, applicationId: ByteString ? = null, creationDateTime: Long ? = null, origin: Long ? = null, rollbackResistant: Unit ? = null, rootOfTrust: RootOfTrust ? = null, osVersion: Long ? = null, osPatchLevel: Long ? = null, attestationApplicationId: ByteString ? = null, attestationIdBrand: ByteString ? = null, attestationIdDevice: ByteString ? = null, attestationIdProduct: ByteString ? = null, attestationIdSerial: ByteString ? = null, attestationIdImei: ByteString ? = null, attestationIdMeid: ByteString ? = null, attestationIdManufacturer: ByteString ? = null, attestationIdModel: ByteString ? = null, vendorPatchLevel: Long ? = null, bootPatchLevel: Long ? = null) AuthorizationList ::= SEQUENCE { purpose [1] EXPLICIT SET OF INTEGER OPTIONAL, algorithm [2] EXPLICIT INTEGER OPTIONAL, keySize [3] EXPLICIT INTEGER OPTIONAL. digest [5] EXPLICIT SET OF INTEGER OPTIONAL, padding [6] EXPLICIT SET OF INTEGER OPTIONAL, ecCurve [10] EXPLICIT INTEGER OPTIONAL, rsaPublicExponent [200] EXPLICIT INTEGER OPTIONAL, rollbackResistance [303] EXPLICIT NULL OPTIONAL, activeDateTime [400] EXPLICIT INTEGER OPTIONAL originationExpireDateTime [401] EXPLICIT INTEGER OPTIONAL usageExpireDateTime [402] EXPLICIT INTEGER OPTIONAL noAuthRequired [503] EXPLICIT NULL OPTIONAL, userAuthType [504] EXPLICIT INTEGER OPTIONAL, authTimeout [505] EXPLICIT INTEGER OPTIONAL, allowWhileOnBody [506] EXPLICIT NULL OPTIONAL, trustedUserPresenceRequired [507] EXPLICIT NULL OPTIONAL, trustedConfirmationRequired [508] EXPLICIT NULL OPTIONAL, unlockedDeviceRequired [509] EXPLICIT NULL OPTIONAL, allApplications [600] EXPLICIT NULL OPTIONAL, applicationId [601] EXPLICIT OCTET_STRING OPTIONAL, creationDateTime [701] EXPLICIT INTEGER OPTIONAL, origin [702] EXPLICIT INTEGER OPTIONAL, rollbackResistant [703] EXPLICIT NULL OPTIONAL, rootOfTrust [704] EXPLICIT RootOfTrust OPTIONAL, osVersion [705] EXPLICIT INTEGER OPTIONAL, osPatchLevel [706] EXPLICIT INTEGER OPTIONAL, attestationApplicationId [709] EXPLICIT OCTET_STRING OPTIONAL, attestationIdBrand [710] EXPLICIT OCTET_STRING OPTIONAL, attestationIdDevice [711] EXPLICIT OCTET_STRING OPTIONAL, attestationIdProduct [712] EXPLICIT OCTET_STRING OPTIONAL, attestationIdSerial [713] EXPLICIT OCTET_STRING OPTIONAL, attestationIdImei [714] EXPLICIT OCTET_STRING OPTIONAL, attestationIdMeid [715] EXPLICIT OCTET_STRING OPTIONAL, attestationIdManufacturer [716] EXPLICIT OCTET_STRING OPTIONAL, attestationIdModel [717] EXPLICIT OCTET_STRING OPTIONAL, vendorPatchLevel [718] EXPLICIT INTEGER OPTIONAL, bootPatchLevel [719] EXPLICIT INTEGER OPTIONAL, }","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/active-date-time/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / activeDateTime activeDateTime \u00b6 val activeDateTime: Long ?","title":"activeDateTime - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/active-date-time/#activedatetime","text":"val activeDateTime: Long ?","title":"activeDateTime"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/algorithm/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / algorithm algorithm \u00b6 val algorithm: Long ?","title":"algorithm - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/algorithm/#algorithm","text":"val algorithm: Long ?","title":"algorithm"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/all-applications/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / allApplications allApplications \u00b6 val allApplications: Unit ?","title":"allApplications - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/all-applications/#allapplications","text":"val allApplications: Unit ?","title":"allApplications"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/allow-while-on-body/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / allowWhileOnBody allowWhileOnBody \u00b6 val allowWhileOnBody: Unit ?","title":"allowWhileOnBody - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/allow-while-on-body/#allowwhileonbody","text":"val allowWhileOnBody: Unit ?","title":"allowWhileOnBody"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/application-id/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / applicationId applicationId \u00b6 val applicationId: ByteString ?","title":"applicationId - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/application-id/#applicationid","text":"val applicationId: ByteString ?","title":"applicationId"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-application-id/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / attestationApplicationId attestationApplicationId \u00b6 val attestationApplicationId: ByteString ?","title":"attestationApplicationId - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-application-id/#attestationapplicationid","text":"val attestationApplicationId: ByteString ?","title":"attestationApplicationId"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-brand/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / attestationIdBrand attestationIdBrand \u00b6 val attestationIdBrand: ByteString ?","title":"attestationIdBrand - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-brand/#attestationidbrand","text":"val attestationIdBrand: ByteString ?","title":"attestationIdBrand"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-device/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / attestationIdDevice attestationIdDevice \u00b6 val attestationIdDevice: ByteString ?","title":"attestationIdDevice - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-device/#attestationiddevice","text":"val attestationIdDevice: ByteString ?","title":"attestationIdDevice"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-imei/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / attestationIdImei attestationIdImei \u00b6 val attestationIdImei: ByteString ?","title":"attestationIdImei - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-imei/#attestationidimei","text":"val attestationIdImei: ByteString ?","title":"attestationIdImei"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-manufacturer/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / attestationIdManufacturer attestationIdManufacturer \u00b6 val attestationIdManufacturer: ByteString ?","title":"attestationIdManufacturer - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-manufacturer/#attestationidmanufacturer","text":"val attestationIdManufacturer: ByteString ?","title":"attestationIdManufacturer"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-meid/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / attestationIdMeid attestationIdMeid \u00b6 val attestationIdMeid: ByteString ?","title":"attestationIdMeid - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-meid/#attestationidmeid","text":"val attestationIdMeid: ByteString ?","title":"attestationIdMeid"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-model/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / attestationIdModel attestationIdModel \u00b6 val attestationIdModel: ByteString ?","title":"attestationIdModel - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-model/#attestationidmodel","text":"val attestationIdModel: ByteString ?","title":"attestationIdModel"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-product/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / attestationIdProduct attestationIdProduct \u00b6 val attestationIdProduct: ByteString ?","title":"attestationIdProduct - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-product/#attestationidproduct","text":"val attestationIdProduct: ByteString ?","title":"attestationIdProduct"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-serial/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / attestationIdSerial attestationIdSerial \u00b6 val attestationIdSerial: ByteString ?","title":"attestationIdSerial - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/attestation-id-serial/#attestationidserial","text":"val attestationIdSerial: ByteString ?","title":"attestationIdSerial"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/auth-timeout/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / authTimeout authTimeout \u00b6 val authTimeout: Long ?","title":"authTimeout - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/auth-timeout/#authtimeout","text":"val authTimeout: Long ?","title":"authTimeout"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/boot-patch-level/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / bootPatchLevel bootPatchLevel \u00b6 val bootPatchLevel: Long ?","title":"bootPatchLevel - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/boot-patch-level/#bootpatchlevel","text":"val bootPatchLevel: Long ?","title":"bootPatchLevel"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/creation-date-time/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / creationDateTime creationDateTime \u00b6 val creationDateTime: Long ?","title":"creationDateTime - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/creation-date-time/#creationdatetime","text":"val creationDateTime: Long ?","title":"creationDateTime"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/digest/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / digest digest \u00b6 val digest: List < Long >?","title":"digest - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/digest/#digest","text":"val digest: List < Long >?","title":"digest"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/ec-curve/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / ecCurve ecCurve \u00b6 val ecCurve: Long ?","title":"ecCurve - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/ec-curve/#eccurve","text":"val ecCurve: Long ?","title":"ecCurve"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/key-size/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / keySize keySize \u00b6 val keySize: Long ?","title":"keySize - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/key-size/#keysize","text":"val keySize: Long ?","title":"keySize"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/no-auth-required/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / noAuthRequired noAuthRequired \u00b6 val noAuthRequired: Unit ?","title":"noAuthRequired - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/no-auth-required/#noauthrequired","text":"val noAuthRequired: Unit ?","title":"noAuthRequired"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/origin/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / origin origin \u00b6 val origin: Long ?","title":"origin - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/origin/#origin","text":"val origin: Long ?","title":"origin"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/origination-expire-date-time/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / originationExpireDateTime originationExpireDateTime \u00b6 val originationExpireDateTime: Long ?","title":"originationExpireDateTime - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/origination-expire-date-time/#originationexpiredatetime","text":"val originationExpireDateTime: Long ?","title":"originationExpireDateTime"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/os-patch-level/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / osPatchLevel osPatchLevel \u00b6 val osPatchLevel: Long ?","title":"osPatchLevel - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/os-patch-level/#ospatchlevel","text":"val osPatchLevel: Long ?","title":"osPatchLevel"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/os-version/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / osVersion osVersion \u00b6 val osVersion: Long ?","title":"osVersion - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/os-version/#osversion","text":"val osVersion: Long ?","title":"osVersion"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/padding/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / padding padding \u00b6 val padding: List < Long >?","title":"padding - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/padding/#padding","text":"val padding: List < Long >?","title":"padding"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/purpose/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / purpose purpose \u00b6 val purpose: List < Long >?","title":"purpose - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/purpose/#purpose","text":"val purpose: List < Long >?","title":"purpose"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/rollback-resistance/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / rollbackResistance rollbackResistance \u00b6 val rollbackResistance: Unit ?","title":"rollbackResistance - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/rollback-resistance/#rollbackresistance","text":"val rollbackResistance: Unit ?","title":"rollbackResistance"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/rollback-resistant/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / rollbackResistant rollbackResistant \u00b6 val rollbackResistant: Unit ?","title":"rollbackResistant - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/rollback-resistant/#rollbackresistant","text":"val rollbackResistant: Unit ?","title":"rollbackResistant"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/root-of-trust/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / rootOfTrust rootOfTrust \u00b6 val rootOfTrust: RootOfTrust ?","title":"rootOfTrust - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/root-of-trust/#rootoftrust","text":"val rootOfTrust: RootOfTrust ?","title":"rootOfTrust"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/rsa-public-exponent/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / rsaPublicExponent rsaPublicExponent \u00b6 val rsaPublicExponent: Long ?","title":"rsaPublicExponent - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/rsa-public-exponent/#rsapublicexponent","text":"val rsaPublicExponent: Long ?","title":"rsaPublicExponent"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/trusted-confirmation-required/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / trustedConfirmationRequired trustedConfirmationRequired \u00b6 val trustedConfirmationRequired: Unit ?","title":"trustedConfirmationRequired - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/trusted-confirmation-required/#trustedconfirmationrequired","text":"val trustedConfirmationRequired: Unit ?","title":"trustedConfirmationRequired"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/trusted-user-presence-required/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / trustedUserPresenceRequired trustedUserPresenceRequired \u00b6 val trustedUserPresenceRequired: Unit ?","title":"trustedUserPresenceRequired - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/trusted-user-presence-required/#trusteduserpresencerequired","text":"val trustedUserPresenceRequired: Unit ?","title":"trustedUserPresenceRequired"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/unlocked-device-required/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / unlockedDeviceRequired unlockedDeviceRequired \u00b6 val unlockedDeviceRequired: Unit ?","title":"unlockedDeviceRequired - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/unlocked-device-required/#unlockeddevicerequired","text":"val unlockedDeviceRequired: Unit ?","title":"unlockedDeviceRequired"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/usage-expire-date-time/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / usageExpireDateTime usageExpireDateTime \u00b6 val usageExpireDateTime: Long ?","title":"usageExpireDateTime - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/usage-expire-date-time/#usageexpiredatetime","text":"val usageExpireDateTime: Long ?","title":"usageExpireDateTime"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/user-auth-type/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / userAuthType userAuthType \u00b6 val userAuthType: Long ?","title":"userAuthType - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/user-auth-type/#userauthtype","text":"val userAuthType: Long ?","title":"userAuthType"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/vendor-patch-level/","text":"certifikit / app.cash.certifikit.attestation / AuthorizationList / vendorPatchLevel vendorPatchLevel \u00b6 val vendorPatchLevel: Long ?","title":"vendorPatchLevel - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-authorization-list/vendor-patch-level/#vendorpatchlevel","text":"val vendorPatchLevel: Long ?","title":"vendorPatchLevel"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/","text":"certifikit / app.cash.certifikit.attestation / KeyDescription KeyDescription \u00b6 data class KeyDescription KeyDescription ::= SEQUENCE { attestationVersion INTEGER, attestationSecurityLevel SecurityLevel, keymasterVersion INTEGER, keymasterSecurityLevel SecurityLevel, attestationChallenge OCTET_STRING, uniqueId OCTET_STRING, softwareEnforced AuthorizationList, teeEnforced AuthorizationList, } SecurityLevel ::= ENUMERATED { Software (0), TrustedEnvironment (1), StrongBox (2), } Constructors \u00b6 Name Summary <init> ``` KeyDescription ::= SEQUENCE { attestationVersion INTEGER, attestationSecurityLevel SecurityLevel, keymasterVersion INTEGER, keymasterSecurityLevel SecurityLevel, attestationChallenge OCTET_STRING, uniqueId OCTET_STRING, softwareEnforced AuthorizationList, teeEnforced AuthorizationList, } SecurityLevel ::= ENUMERATED { Software (0), TrustedEnvironment (1), StrongBox (2), } `` <br> KeyDescription(attestationVersion: [ Long ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) , attestationSecurityLevel: [ Long ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) , keymasterVersion: [ Long ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) , keymasterSecurityLevel: [ Long ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) , attestationChallenge: [ ByteString ](https://square.github.io/okio/2.x/okio/okio/-byte-string/index.html) , uniqueId: [ ByteString ](https://square.github.io/okio/2.x/okio/okio/-byte-string/index.html) , softwareEnforced: [ AuthorizationList ](../-authorization-list/index.md) , teeEnforced: [ AuthorizationList ](../-authorization-list/index.md) )` | Properties \u00b6 Name Summary attestationChallenge val attestationChallenge: ByteString attestationSecurityLevel val attestationSecurityLevel: Long attestationVersion val attestationVersion: Long keymasterSecurityLevel val keymasterSecurityLevel: Long keymasterVersion val keymasterVersion: Long softwareEnforced val softwareEnforced: AuthorizationList teeEnforced val teeEnforced: AuthorizationList uniqueId val uniqueId: ByteString","title":"KeyDescription - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/#keydescription","text":"data class KeyDescription KeyDescription ::= SEQUENCE { attestationVersion INTEGER, attestationSecurityLevel SecurityLevel, keymasterVersion INTEGER, keymasterSecurityLevel SecurityLevel, attestationChallenge OCTET_STRING, uniqueId OCTET_STRING, softwareEnforced AuthorizationList, teeEnforced AuthorizationList, } SecurityLevel ::= ENUMERATED { Software (0), TrustedEnvironment (1), StrongBox (2), }","title":"KeyDescription"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/#constructors","text":"Name Summary <init> ``` KeyDescription ::= SEQUENCE { attestationVersion INTEGER, attestationSecurityLevel SecurityLevel, keymasterVersion INTEGER, keymasterSecurityLevel SecurityLevel, attestationChallenge OCTET_STRING, uniqueId OCTET_STRING, softwareEnforced AuthorizationList, teeEnforced AuthorizationList, } SecurityLevel ::= ENUMERATED { Software (0), TrustedEnvironment (1), StrongBox (2), } `` <br> KeyDescription(attestationVersion: [ Long ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) , attestationSecurityLevel: [ Long ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) , keymasterVersion: [ Long ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) , keymasterSecurityLevel: [ Long ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) , attestationChallenge: [ ByteString ](https://square.github.io/okio/2.x/okio/okio/-byte-string/index.html) , uniqueId: [ ByteString ](https://square.github.io/okio/2.x/okio/okio/-byte-string/index.html) , softwareEnforced: [ AuthorizationList ](../-authorization-list/index.md) , teeEnforced: [ AuthorizationList ](../-authorization-list/index.md) )` |","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/#properties","text":"Name Summary attestationChallenge val attestationChallenge: ByteString attestationSecurityLevel val attestationSecurityLevel: Long attestationVersion val attestationVersion: Long keymasterSecurityLevel val keymasterSecurityLevel: Long keymasterVersion val keymasterVersion: Long softwareEnforced val softwareEnforced: AuthorizationList teeEnforced val teeEnforced: AuthorizationList uniqueId val uniqueId: ByteString","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/-init-/","text":"certifikit / app.cash.certifikit.attestation / KeyDescription / <init> <init> \u00b6 KeyDescription(attestationVersion: Long , attestationSecurityLevel: Long , keymasterVersion: Long , keymasterSecurityLevel: Long , attestationChallenge: ByteString , uniqueId: ByteString , softwareEnforced: AuthorizationList , teeEnforced: AuthorizationList ) KeyDescription ::= SEQUENCE { attestationVersion INTEGER, attestationSecurityLevel SecurityLevel, keymasterVersion INTEGER, keymasterSecurityLevel SecurityLevel, attestationChallenge OCTET_STRING, uniqueId OCTET_STRING, softwareEnforced AuthorizationList, teeEnforced AuthorizationList, } SecurityLevel ::= ENUMERATED { Software (0), TrustedEnvironment (1), StrongBox (2), }","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/-init-/#init","text":"KeyDescription(attestationVersion: Long , attestationSecurityLevel: Long , keymasterVersion: Long , keymasterSecurityLevel: Long , attestationChallenge: ByteString , uniqueId: ByteString , softwareEnforced: AuthorizationList , teeEnforced: AuthorizationList ) KeyDescription ::= SEQUENCE { attestationVersion INTEGER, attestationSecurityLevel SecurityLevel, keymasterVersion INTEGER, keymasterSecurityLevel SecurityLevel, attestationChallenge OCTET_STRING, uniqueId OCTET_STRING, softwareEnforced AuthorizationList, teeEnforced AuthorizationList, } SecurityLevel ::= ENUMERATED { Software (0), TrustedEnvironment (1), StrongBox (2), }","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/attestation-challenge/","text":"certifikit / app.cash.certifikit.attestation / KeyDescription / attestationChallenge attestationChallenge \u00b6 val attestationChallenge: ByteString","title":"attestationChallenge - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/attestation-challenge/#attestationchallenge","text":"val attestationChallenge: ByteString","title":"attestationChallenge"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/attestation-security-level/","text":"certifikit / app.cash.certifikit.attestation / KeyDescription / attestationSecurityLevel attestationSecurityLevel \u00b6 val attestationSecurityLevel: Long","title":"attestationSecurityLevel - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/attestation-security-level/#attestationsecuritylevel","text":"val attestationSecurityLevel: Long","title":"attestationSecurityLevel"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/attestation-version/","text":"certifikit / app.cash.certifikit.attestation / KeyDescription / attestationVersion attestationVersion \u00b6 val attestationVersion: Long","title":"attestationVersion - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/attestation-version/#attestationversion","text":"val attestationVersion: Long","title":"attestationVersion"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/keymaster-security-level/","text":"certifikit / app.cash.certifikit.attestation / KeyDescription / keymasterSecurityLevel keymasterSecurityLevel \u00b6 val keymasterSecurityLevel: Long","title":"keymasterSecurityLevel - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/keymaster-security-level/#keymastersecuritylevel","text":"val keymasterSecurityLevel: Long","title":"keymasterSecurityLevel"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/keymaster-version/","text":"certifikit / app.cash.certifikit.attestation / KeyDescription / keymasterVersion keymasterVersion \u00b6 val keymasterVersion: Long","title":"keymasterVersion - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/keymaster-version/#keymasterversion","text":"val keymasterVersion: Long","title":"keymasterVersion"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/software-enforced/","text":"certifikit / app.cash.certifikit.attestation / KeyDescription / softwareEnforced softwareEnforced \u00b6 val softwareEnforced: AuthorizationList","title":"softwareEnforced - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/software-enforced/#softwareenforced","text":"val softwareEnforced: AuthorizationList","title":"softwareEnforced"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/tee-enforced/","text":"certifikit / app.cash.certifikit.attestation / KeyDescription / teeEnforced teeEnforced \u00b6 val teeEnforced: AuthorizationList","title":"teeEnforced - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/tee-enforced/#teeenforced","text":"val teeEnforced: AuthorizationList","title":"teeEnforced"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/unique-id/","text":"certifikit / app.cash.certifikit.attestation / KeyDescription / uniqueId uniqueId \u00b6 val uniqueId: ByteString","title":"uniqueId - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-key-description/unique-id/#uniqueid","text":"val uniqueId: ByteString","title":"uniqueId"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/","text":"certifikit / app.cash.certifikit.attestation / RootOfTrust RootOfTrust \u00b6 data class RootOfTrust VerifiedBootState ::= ENUMERATED { Verified (0), SelfSigned (1), Unverified (2), Failed (3), } RootOfTrust ::= SEQUENCE { verifiedBootKey OCTET_STRING, deviceLocked BOOLEAN, verifiedBootState VerifiedBootState, verifiedBootHash OCTET_STRING, } Constructors \u00b6 Name Summary <init> ``` VerifiedBootState ::= ENUMERATED { Verified (0), SelfSigned (1), Unverified (2), Failed (3), } RootOfTrust ::= SEQUENCE { verifiedBootKey OCTET_STRING, deviceLocked BOOLEAN, verifiedBootState VerifiedBootState, verifiedBootHash OCTET_STRING, } `` <br> RootOfTrust(verifiedBootKey: [ ByteString ](https://square.github.io/okio/2.x/okio/okio/-byte-string/index.html) , deviceLocked: [ Boolean ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) , verifiedBootState: [ Long ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) , verifiedBootHash: [ ByteString ](https://square.github.io/okio/2.x/okio/okio/-byte-string/index.html) )` | Properties \u00b6 Name Summary deviceLocked val deviceLocked: Boolean verifiedBootHash val verifiedBootHash: ByteString verifiedBootKey val verifiedBootKey: ByteString verifiedBootState val verifiedBootState: Long","title":"RootOfTrust - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/#rootoftrust","text":"data class RootOfTrust VerifiedBootState ::= ENUMERATED { Verified (0), SelfSigned (1), Unverified (2), Failed (3), } RootOfTrust ::= SEQUENCE { verifiedBootKey OCTET_STRING, deviceLocked BOOLEAN, verifiedBootState VerifiedBootState, verifiedBootHash OCTET_STRING, }","title":"RootOfTrust"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/#constructors","text":"Name Summary <init> ``` VerifiedBootState ::= ENUMERATED { Verified (0), SelfSigned (1), Unverified (2), Failed (3), } RootOfTrust ::= SEQUENCE { verifiedBootKey OCTET_STRING, deviceLocked BOOLEAN, verifiedBootState VerifiedBootState, verifiedBootHash OCTET_STRING, } `` <br> RootOfTrust(verifiedBootKey: [ ByteString ](https://square.github.io/okio/2.x/okio/okio/-byte-string/index.html) , deviceLocked: [ Boolean ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) , verifiedBootState: [ Long ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html) , verifiedBootHash: [ ByteString ](https://square.github.io/okio/2.x/okio/okio/-byte-string/index.html) )` |","title":"Constructors"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/#properties","text":"Name Summary deviceLocked val deviceLocked: Boolean verifiedBootHash val verifiedBootHash: ByteString verifiedBootKey val verifiedBootKey: ByteString verifiedBootState val verifiedBootState: Long","title":"Properties"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/-init-/","text":"certifikit / app.cash.certifikit.attestation / RootOfTrust / <init> <init> \u00b6 RootOfTrust(verifiedBootKey: ByteString , deviceLocked: Boolean , verifiedBootState: Long , verifiedBootHash: ByteString ) VerifiedBootState ::= ENUMERATED { Verified (0), SelfSigned (1), Unverified (2), Failed (3), } RootOfTrust ::= SEQUENCE { verifiedBootKey OCTET_STRING, deviceLocked BOOLEAN, verifiedBootState VerifiedBootState, verifiedBootHash OCTET_STRING, }","title":" init "},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/-init-/#init","text":"RootOfTrust(verifiedBootKey: ByteString , deviceLocked: Boolean , verifiedBootState: Long , verifiedBootHash: ByteString ) VerifiedBootState ::= ENUMERATED { Verified (0), SelfSigned (1), Unverified (2), Failed (3), } RootOfTrust ::= SEQUENCE { verifiedBootKey OCTET_STRING, deviceLocked BOOLEAN, verifiedBootState VerifiedBootState, verifiedBootHash OCTET_STRING, }","title":"&lt;init&gt;"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/device-locked/","text":"certifikit / app.cash.certifikit.attestation / RootOfTrust / deviceLocked deviceLocked \u00b6 val deviceLocked: Boolean","title":"deviceLocked - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/device-locked/#devicelocked","text":"val deviceLocked: Boolean","title":"deviceLocked"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/verified-boot-hash/","text":"certifikit / app.cash.certifikit.attestation / RootOfTrust / verifiedBootHash verifiedBootHash \u00b6 val verifiedBootHash: ByteString","title":"verifiedBootHash - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/verified-boot-hash/#verifiedboothash","text":"val verifiedBootHash: ByteString","title":"verifiedBootHash"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/verified-boot-key/","text":"certifikit / app.cash.certifikit.attestation / RootOfTrust / verifiedBootKey verifiedBootKey \u00b6 val verifiedBootKey: ByteString","title":"verifiedBootKey - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/verified-boot-key/#verifiedbootkey","text":"val verifiedBootKey: ByteString","title":"verifiedBootKey"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/verified-boot-state/","text":"certifikit / app.cash.certifikit.attestation / RootOfTrust / verifiedBootState verifiedBootState \u00b6 val verifiedBootState: Long","title":"verifiedBootState - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.attestation/-root-of-trust/verified-boot-state/#verifiedbootstate","text":"val verifiedBootState: Long","title":"verifiedBootState"},{"location":"0.x/certifikit/app.cash.certifikit.text/","text":"certifikit / app.cash.certifikit.text Package app.cash.certifikit.text \u00b6 Extensions for External Classes \u00b6 Name Summary java.security.cert.X509Certificate java.security.PrivateKey kotlin.String Functions \u00b6 Name Summary decode Decodes a multiline string that contains both a certificate and a private key , both PEM-encoded . A typical input string looks like this: fun decode(certificateAndPrivateKeyPem: String ): Pair < KeyPair , X509Certificate >","title":"Package app.cash.certifikit.text - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.text/#package-appcashcertifikittext","text":"","title":"Package app.cash.certifikit.text"},{"location":"0.x/certifikit/app.cash.certifikit.text/#extensions-for-external-classes","text":"Name Summary java.security.cert.X509Certificate java.security.PrivateKey kotlin.String","title":"Extensions for External Classes"},{"location":"0.x/certifikit/app.cash.certifikit.text/#functions","text":"Name Summary decode Decodes a multiline string that contains both a certificate and a private key , both PEM-encoded . A typical input string looks like this: fun decode(certificateAndPrivateKeyPem: String ): Pair < KeyPair , X509Certificate >","title":"Functions"},{"location":"0.x/certifikit/app.cash.certifikit.text/decode/","text":"certifikit / app.cash.certifikit.text / decode decode \u00b6 fun decode(certificateAndPrivateKeyPem: String ): Pair < KeyPair , X509Certificate > Decodes a multiline string that contains both a certificate and a private key , both PEM-encoded . A typical input string looks like this: -----BEGIN CERTIFICATE----- MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT yyaoEufLKVXhrTQhRfodTeigi4RX -----END CERTIFICATE----- -----BEGIN PRIVATE KEY----- MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J lu/GJQZoU9lDrCPeUcQ28tzOWw== -----END PRIVATE KEY----- The string should contain exactly one certificate and one private key in PKCS #8 format. It should not contain any other PEM-encoded blocks, but it may contain other text which will be ignored. Encode a held certificate into this format by concatenating the results of certificatePem() and privateKeyPkcs8Pem() .","title":"decode - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.text/decode/#decode","text":"fun decode(certificateAndPrivateKeyPem: String ): Pair < KeyPair , X509Certificate > Decodes a multiline string that contains both a certificate and a private key , both PEM-encoded . A typical input string looks like this: -----BEGIN CERTIFICATE----- MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT yyaoEufLKVXhrTQhRfodTeigi4RX -----END CERTIFICATE----- -----BEGIN PRIVATE KEY----- MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J lu/GJQZoU9lDrCPeUcQ28tzOWw== -----END PRIVATE KEY----- The string should contain exactly one certificate and one private key in PKCS #8 format. It should not contain any other PEM-encoded blocks, but it may contain other text which will be ignored. Encode a held certificate into this format by concatenating the results of certificatePem() and privateKeyPkcs8Pem() .","title":"decode"},{"location":"0.x/certifikit/app.cash.certifikit.text/java.security.-private-key/","text":"certifikit / app.cash.certifikit.text / java.security.PrivateKey Extensions for java.security.PrivateKey \u00b6 Name Summary privateKeyPkcs1Pem Returns the RSA private key encoded in PKCS #1 PEM format . fun PrivateKey .privateKeyPkcs1Pem(): String privateKeyPkcs8Pem Returns the RSA private key encoded in PKCS #8 PEM format . fun PrivateKey .privateKeyPkcs8Pem(): String","title":"Extensions for java.security.PrivateKey - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.text/java.security.-private-key/#extensions-for-javasecurityprivatekey","text":"Name Summary privateKeyPkcs1Pem Returns the RSA private key encoded in PKCS #1 PEM format . fun PrivateKey .privateKeyPkcs1Pem(): String privateKeyPkcs8Pem Returns the RSA private key encoded in PKCS #8 PEM format . fun PrivateKey .privateKeyPkcs8Pem(): String","title":"Extensions for java.security.PrivateKey"},{"location":"0.x/certifikit/app.cash.certifikit.text/java.security.-private-key/private-key-pkcs1-pem/","text":"certifikit / app.cash.certifikit.text / java.security.PrivateKey / privateKeyPkcs1Pem privateKeyPkcs1Pem \u00b6 fun PrivateKey .privateKeyPkcs1Pem(): String Returns the RSA private key encoded in PKCS #1 PEM format .","title":"privateKeyPkcs1Pem - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.text/java.security.-private-key/private-key-pkcs1-pem/#privatekeypkcs1pem","text":"fun PrivateKey .privateKeyPkcs1Pem(): String Returns the RSA private key encoded in PKCS #1 PEM format .","title":"privateKeyPkcs1Pem"},{"location":"0.x/certifikit/app.cash.certifikit.text/java.security.-private-key/private-key-pkcs8-pem/","text":"certifikit / app.cash.certifikit.text / java.security.PrivateKey / privateKeyPkcs8Pem privateKeyPkcs8Pem \u00b6 fun PrivateKey .privateKeyPkcs8Pem(): String Returns the RSA private key encoded in PKCS #8 PEM format .","title":"privateKeyPkcs8Pem - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.text/java.security.-private-key/private-key-pkcs8-pem/#privatekeypkcs8pem","text":"fun PrivateKey .privateKeyPkcs8Pem(): String Returns the RSA private key encoded in PKCS #8 PEM format .","title":"privateKeyPkcs8Pem"},{"location":"0.x/certifikit/app.cash.certifikit.text/java.security.cert.-x509-certificate/","text":"certifikit / app.cash.certifikit.text / java.security.cert.X509Certificate Extensions for java.security.cert.X509Certificate \u00b6 Name Summary certificatePem Returns the certificate encoded in PEM format . fun X509Certificate .certificatePem(): String","title":"Extensions for java.security.cert.X509Certificate - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.text/java.security.cert.-x509-certificate/#extensions-for-javasecuritycertx509certificate","text":"Name Summary certificatePem Returns the certificate encoded in PEM format . fun X509Certificate .certificatePem(): String","title":"Extensions for java.security.cert.X509Certificate"},{"location":"0.x/certifikit/app.cash.certifikit.text/java.security.cert.-x509-certificate/certificate-pem/","text":"certifikit / app.cash.certifikit.text / java.security.cert.X509Certificate / certificatePem certificatePem \u00b6 fun X509Certificate .certificatePem(): String Returns the certificate encoded in PEM format .","title":"certificatePem - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.text/java.security.cert.-x509-certificate/certificate-pem/#certificatepem","text":"fun X509Certificate .certificatePem(): String Returns the certificate encoded in PEM format .","title":"certificatePem"},{"location":"0.x/certifikit/app.cash.certifikit.text/kotlin.-string/","text":"certifikit / app.cash.certifikit.text / kotlin.String Extensions for kotlin.String \u00b6 Name Summary decodeCertificatePem Decodes a multiline string that contains a certificate which is PEM-encoded . A typical input string looks like this: fun String .decodeCertificatePem(): X509Certificate","title":"Extensions for kotlin.String - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.text/kotlin.-string/#extensions-for-kotlinstring","text":"Name Summary decodeCertificatePem Decodes a multiline string that contains a certificate which is PEM-encoded . A typical input string looks like this: fun String .decodeCertificatePem(): X509Certificate","title":"Extensions for kotlin.String"},{"location":"0.x/certifikit/app.cash.certifikit.text/kotlin.-string/decode-certificate-pem/","text":"certifikit / app.cash.certifikit.text / kotlin.String / decodeCertificatePem decodeCertificatePem \u00b6 fun String .decodeCertificatePem(): X509Certificate Decodes a multiline string that contains a certificate which is PEM-encoded . A typical input string looks like this: -----BEGIN CERTIFICATE----- MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT yyaoEufLKVXhrTQhRfodTeigi4RX -----END CERTIFICATE-----","title":"decodeCertificatePem - Certifikit"},{"location":"0.x/certifikit/app.cash.certifikit.text/kotlin.-string/decode-certificate-pem/#decodecertificatepem","text":"fun String .decodeCertificatePem(): X509Certificate Decodes a multiline string that contains a certificate which is PEM-encoded . A typical input string looks like this: -----BEGIN CERTIFICATE----- MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT yyaoEufLKVXhrTQhRfodTeigi4RX -----END CERTIFICATE-----","title":"decodeCertificatePem"}]}