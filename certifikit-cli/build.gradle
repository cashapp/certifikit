import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id 'org.jetbrains.kotlin.multiplatform'
  id 'application'
  id 'com.palantir.graal' version '0.10.0'
  id "org.jetbrains.kotlin.kapt"
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

application {
  mainClassName = 'app.cash.certifikit.cli.Main'
}

kotlin {
  jvm {
    withJava()
    jvmJar {
      manifest {
        attributes 'Automatic-Module-Name': 'app.cash.certifikit.cli'
        attributes 'Main-Class': application.mainClassName
      }
//      archiveClassifier.set("")
//      archiveBaseName.set("xxx")
    }
  }

  sourceSets {
    jvmMain {
      dependencies {
        api project(':certifikit')
        api Dependencies.okio
        implementation('info.picocli:picocli:4.6.2')
        implementation(project.dependencies.platform("com.squareup.okhttp3:okhttp-bom:5.0.0-alpha.3"))
        implementation('com.squareup.okhttp3:okhttp')
        implementation('com.squareup.okhttp3:okhttp-tls')
        implementation('com.squareup.okhttp3:logging-interceptor')

        implementation(project.dependencies.platform("io.netty:netty-bom:4.1.72.Final"))
        implementation('io.projectreactor.netty:reactor-netty-core:1.0.14')
        implementation('io.r2dbc:r2dbc-postgresql:0.8.10.RELEASE') {
          exclude group: 'io.projectreactor.netty'
        }
        implementation('org.jetbrains.kotlinx:kotlinx-coroutines-reactive:1.6.0')

        implementation('org.jetbrains.kotlinx:kotlinx-datetime:0.3.1')
        implementation("org.jetbrains.kotlin:kotlin-reflect:${Versions.kotlin}")
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${Versions.kotlin}")
        implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0')
        implementation('org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.6.0')

        implementation('org.bouncycastle:bcprov-jdk15on:1.70')
        implementation('org.bouncycastle:bcpkix-jdk15on:1.70')
        implementation('org.bouncycastle:bctls-jdk15on:1.70')

        configurations["kapt"].dependencies.add(project.dependencies.create("info.picocli:picocli-codegen:4.6.1"))
      }
    }

    jvmTest {
      dependencies {
        implementation 'com.squareup.okhttp3:mockwebserver3-junit5:5.0.0-alpha.3'
        implementation Dependencies.junit5Api
        implementation Dependencies.junit5JupiterEngine
        implementation Dependencies.assertj
      }
    }
  }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
  kotlinOptions {
    jvmTarget = "1.8"
    allWarningsAsErrors = false
    freeCompilerArgs = ["-Xjsr305=strict", "-Xjvm-default=enable", "-Xopt-in=kotlin.RequiresOptIn"]
  }
}

graal {
  mainClass(application.mainClassName)
  outputName("cft")
  graalVersion('21.3.0')
  javaVersion('11')

  option("--enable-https")
  option("--no-fallback")
  option("--allow-incomplete-classpath")
  option("--initialize-at-run-time=io.netty")
}

task copyJvmJar(type: Copy) {
  def sourceFile = project.tasks.getByName("jvmJar").outputs.files.singleFile
  def destFile = project.tasks.getByName("jar").outputs.files.singleFile
  from sourceFile
  into destFile.parentFile
  rename (sourceFile.name, destFile.name)
}

tasks.getByName("copyJvmJar").dependsOn(jvmJar)
tasks.getByName("nativeImage").dependsOn(copyJvmJar)
